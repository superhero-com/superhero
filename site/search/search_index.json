{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Docs (MkDocs Material)","text":"<p>Local preview:</p> <pre><code>python -m pip install --upgrade pip\npip install -r docs/requirements.txt\nmkdocs serve\n</code></pre> <p>Deploy via CI on main branch. Manual deploy:</p> <pre><code>mkdocs gh-deploy --force\n</code></pre>"},{"location":"plugin-sdk/","title":"Superhero Plugin SDK (v1.x)","text":"<p>This guide explains how to extend the app with external plugins. You can add feed entries, composer actions, and now composer attachments (inline panels like Poll).</p>"},{"location":"plugin-sdk/#concepts","title":"Concepts","text":"<ul> <li>Host: the app that loads plugins at runtime</li> <li>Capabilities: <code>feed</code>, <code>composer</code> (actions, attachments), <code>item-actions</code>, <code>routes</code>, <code>modals</code></li> <li>SDK: small, versioned API <code>@superhero/plugin-sdk</code> (local path <code>src/plugin-sdk</code>)</li> </ul>"},{"location":"plugin-sdk/#quickstart-attachments","title":"Quickstart (attachments)","text":"<pre><code>import { definePlugin, type ComposerAttachmentSpec } from '@superhero/plugin-sdk';\n\nexport default definePlugin({\n  meta: { id: 'org.polls', name: 'Polls', version: '1.0.0', apiVersion: '1.x', capabilities: ['composer'] },\n  setup({ register, ctx }) {\n    const spec: ComposerAttachmentSpec = {\n      id: 'poll',\n      label: 'Poll',\n      Panel: ({ ctx, onRemove }) =&gt; /* your UI */ null,\n      validate: (ctx) =&gt; [],\n      onAfterPost: async (ctx, post) =&gt; { /* async work */ },\n    };\n    register({ attachments: () =&gt; [spec] });\n  }\n});\n</code></pre>"},{"location":"plugin-sdk/#composer-attachments","title":"Composer attachments","text":"<p>Attachments add an expandable panel to the post composer. The main post text remains unchanged; attachments may validate inputs and (optionally) run async tasks after posting.</p> <p>Key types (simplified): <pre><code>type ComposerAttachmentCtx = {\n  insertText(text: string): void;\n  navigate(to: string): void;\n  getValue&lt;T&gt;(ns: string): T | undefined;\n  setValue&lt;T&gt;(ns: string, v: T): void;\n  ensureWallet(): Promise&lt;{ sdk: any; currentBlockHeight?: number }&gt;;\n  cacheLink?(postId: string, kind: string, payload: any): void;\n  pushFeedEntry?(kind: string, entry: any): void;\n};\n\ntype ComposerAttachmentSpec = {\n  id: string;\n  label: string;\n  Panel: React.FC&lt;{ ctx: ComposerAttachmentCtx; onRemove: () =&gt; void }&gt;;\n  validate(ctx: ComposerAttachmentCtx): { field?: string; message: string }[];\n  onAfterPost(ctx: ComposerAttachmentCtx, post: { id: string; text: string }): Promise&lt;void&gt;;\n};\n</code></pre></p>"},{"location":"plugin-sdk/#poll-example","title":"Poll example","text":"<ul> <li>Panel with dynamic options and close height; show estimated close date/time.</li> <li>After posting, deploy the poll, then update inline cache and push a <code>poll-created</code> feed entry.</li> </ul>"},{"location":"plugin-sdk/#feed-plugins","title":"Feed plugins","text":"<p>Implement <code>feed: FeedPlugin</code> with <code>fetchPage</code> and <code>Render</code> to add new item kinds to the unified feed. See <code>src/features/social/feed-plugins/*</code> for examples.</p>"},{"location":"plugin-sdk/#actions-and-item-actions","title":"Actions and item actions","text":"<ul> <li>Composer actions: simple buttons near Emoji/GIF.</li> <li>Item actions: add contextual actions in item menus.</li> </ul>"},{"location":"plugin-sdk/#testing","title":"Testing","text":"<ul> <li>Develop locally as ESM; add your plugin URL to <code>CONFIG.PLUGINS</code>.</li> <li>Mock <code>ensureWallet</code> and <code>cacheLink</code> for unit tests.</li> </ul>"},{"location":"_archive/DEX_REFACTORING_SUMMARY/","title":"DEX Refactoring Migration Summary","text":""},{"location":"_archive/DEX_REFACTORING_SUMMARY/#overview","title":"Overview","text":"<p>Successfully completed a full migration of the monolithic DEX component (1335 lines) into a modular, maintainable architecture with focused components and custom hooks.</p>"},{"location":"_archive/DEX_REFACTORING_SUMMARY/#what-was-accomplished","title":"What Was Accomplished","text":""},{"location":"_archive/DEX_REFACTORING_SUMMARY/#1-component-architecture","title":"1. Component Architecture","text":"<ul> <li>Before: Single <code>Dex.tsx</code> file with 1335 lines handling all DEX functionality</li> <li>After: 15+ focused components organized by responsibility</li> </ul>"},{"location":"_archive/DEX_REFACTORING_SUMMARY/#2-custom-hooks","title":"2. Custom Hooks","text":"<ul> <li>Before: All logic embedded in the main component</li> <li>After: 4 custom hooks for specific concerns:</li> <li><code>useTokenList</code> - Token management</li> <li><code>useTokenBalances</code> - Balance fetching</li> <li><code>useSwapQuote</code> - Quote handling with debouncing</li> <li><code>useSwapExecution</code> - Transaction execution</li> </ul>"},{"location":"_archive/DEX_REFACTORING_SUMMARY/#3-type-safety","title":"3. Type Safety","text":"<ul> <li>Before: Minimal TypeScript interfaces</li> <li>After: Comprehensive type system with 15+ interfaces</li> </ul>"},{"location":"_archive/DEX_REFACTORING_SUMMARY/#4-directory-structure","title":"4. Directory Structure","text":"<pre><code>src/components/dex/\n\u251c\u2500\u2500 core/           # 6 core components\n\u251c\u2500\u2500 widgets/        # 3 specialized widgets\n\u251c\u2500\u2500 supporting/     # 1 supporting component\n\u251c\u2500\u2500 hooks/          # 4 custom hooks\n\u251c\u2500\u2500 types/          # TypeScript definitions\n\u2514\u2500\u2500 index.ts        # Clean exports\n</code></pre>"},{"location":"_archive/DEX_REFACTORING_SUMMARY/#components-created","title":"Components Created","text":""},{"location":"_archive/DEX_REFACTORING_SUMMARY/#core-components","title":"Core Components","text":"<ol> <li>SwapForm.tsx - Main swap interface orchestrator</li> <li>TokenInput.tsx - Token selection + amount input</li> <li>TokenSelector.tsx - Enhanced token selection with search</li> <li>SwapSettings.tsx - Slippage and deadline configuration</li> <li>SwapRouteInfo.tsx - Route information display</li> <li>SwapConfirmation.tsx - Confirmation modal</li> </ol>"},{"location":"_archive/DEX_REFACTORING_SUMMARY/#widget-components","title":"Widget Components","text":"<ol> <li>WrapUnwrapWidget.tsx - AE \u2194 WAE conversion</li> <li>EthxitWidget.tsx - aeETH \u2192 AE conversion</li> <li>EthBridgeWidget.tsx - ETH \u2192 AE bridge + swap</li> </ol>"},{"location":"_archive/DEX_REFACTORING_SUMMARY/#supporting-components","title":"Supporting Components","text":"<ol> <li>RecentActivity.tsx - Transaction history</li> </ol>"},{"location":"_archive/DEX_REFACTORING_SUMMARY/#key-benefits-achieved","title":"Key Benefits Achieved","text":""},{"location":"_archive/DEX_REFACTORING_SUMMARY/#1-maintainability","title":"1. Maintainability","text":"<ul> <li>Each component has a single responsibility</li> <li>Clear separation of concerns</li> <li>Easier to locate and fix issues</li> </ul>"},{"location":"_archive/DEX_REFACTORING_SUMMARY/#2-reusability","title":"2. Reusability","text":"<ul> <li>Components can be used independently</li> <li>Hooks can be reused across different contexts</li> <li>Modular architecture supports composition</li> </ul>"},{"location":"_archive/DEX_REFACTORING_SUMMARY/#3-testability","title":"3. Testability","text":"<ul> <li>Smaller components are easier to unit test</li> <li>Hooks can be tested in isolation</li> <li>Clear interfaces make mocking easier</li> </ul>"},{"location":"_archive/DEX_REFACTORING_SUMMARY/#4-developer-experience","title":"4. Developer Experience","text":"<ul> <li>Better code organization</li> <li>Comprehensive TypeScript types</li> <li>Clear component boundaries</li> <li>Easier onboarding for new developers</li> </ul>"},{"location":"_archive/DEX_REFACTORING_SUMMARY/#5-performance","title":"5. Performance","text":"<ul> <li>Better code splitting potential</li> <li>Lazy loading opportunities</li> <li>Reduced bundle size for specific features</li> </ul>"},{"location":"_archive/DEX_REFACTORING_SUMMARY/#technical-improvements","title":"Technical Improvements","text":""},{"location":"_archive/DEX_REFACTORING_SUMMARY/#1-state-management","title":"1. State Management","text":"<ul> <li>Centralized state in custom hooks</li> <li>Better state isolation</li> <li>Reduced prop drilling</li> </ul>"},{"location":"_archive/DEX_REFACTORING_SUMMARY/#2-error-handling","title":"2. Error Handling","text":"<ul> <li>Consistent error handling patterns</li> <li>Better user feedback</li> <li>Graceful degradation</li> </ul>"},{"location":"_archive/DEX_REFACTORING_SUMMARY/#3-type-safety_1","title":"3. Type Safety","text":"<ul> <li>Comprehensive TypeScript coverage</li> <li>Better IDE support</li> <li>Runtime type safety</li> </ul>"},{"location":"_archive/DEX_REFACTORING_SUMMARY/#4-code-quality","title":"4. Code Quality","text":"<ul> <li>Consistent coding patterns</li> <li>Better separation of concerns</li> <li>Improved readability</li> </ul>"},{"location":"_archive/DEX_REFACTORING_SUMMARY/#migration-strategy","title":"Migration Strategy","text":""},{"location":"_archive/DEX_REFACTORING_SUMMARY/#phase-1-foundation","title":"Phase 1: Foundation","text":"<ul> <li>Created type definitions</li> <li>Implemented custom hooks</li> <li>Established component architecture</li> </ul>"},{"location":"_archive/DEX_REFACTORING_SUMMARY/#phase-2-core-components","title":"Phase 2: Core Components","text":"<ul> <li>Built core swap functionality</li> <li>Implemented token management</li> <li>Created UI components</li> </ul>"},{"location":"_archive/DEX_REFACTORING_SUMMARY/#phase-3-specialized-widgets","title":"Phase 3: Specialized Widgets","text":"<ul> <li>Implemented wrap/unwrap functionality</li> <li>Added ETH bridge features</li> <li>Created specialized conversion widgets</li> </ul>"},{"location":"_archive/DEX_REFACTORING_SUMMARY/#phase-4-integration","title":"Phase 4: Integration","text":"<ul> <li>Connected all components</li> <li>Ensured backward compatibility</li> <li>Added comprehensive documentation</li> </ul>"},{"location":"_archive/DEX_REFACTORING_SUMMARY/#files-createdmodified","title":"Files Created/Modified","text":""},{"location":"_archive/DEX_REFACTORING_SUMMARY/#new-files-15","title":"New Files (15+)","text":"<ul> <li><code>src/components/dex/types/dex.ts</code></li> <li><code>src/components/dex/hooks/useTokenList.ts</code></li> <li><code>src/components/dex/hooks/useTokenBalances.ts</code></li> <li><code>src/components/dex/hooks/useSwapQuote.ts</code></li> <li><code>src/components/dex/hooks/useSwapExecution.ts</code></li> <li><code>src/components/dex/core/SwapForm.tsx</code></li> <li><code>src/components/dex/core/TokenInput.tsx</code></li> <li><code>src/components/dex/core/TokenSelector.tsx</code></li> <li><code>src/components/dex/core/SwapSettings.tsx</code></li> <li><code>src/components/dex/core/SwapRouteInfo.tsx</code></li> <li><code>src/components/dex/core/SwapConfirmation.tsx</code></li> <li><code>src/components/dex/widgets/WrapUnwrapWidget.tsx</code></li> <li><code>src/components/dex/widgets/EthxitWidget.tsx</code></li> <li><code>src/components/dex/widgets/EthBridgeWidget.tsx</code></li> <li><code>src/components/dex/supporting/RecentActivity.tsx</code></li> <li><code>src/components/dex/index.ts</code></li> <li><code>src/components/dex/README.md</code></li> <li><code>src/views/DexRefactored.tsx</code></li> </ul>"},{"location":"_archive/DEX_REFACTORING_SUMMARY/#preserved-files","title":"Preserved Files","text":"<ul> <li><code>src/views/Dex.tsx</code> (original preserved for reference)</li> </ul>"},{"location":"_archive/DEX_REFACTORING_SUMMARY/#usage-examples","title":"Usage Examples","text":""},{"location":"_archive/DEX_REFACTORING_SUMMARY/#basic-usage","title":"Basic Usage","text":"<pre><code>import { SwapForm, WrapUnwrapWidget } from '../components/dex';\n\nfunction MyDexPage() {\n  return (\n    &lt;div&gt;\n      &lt;SwapForm /&gt;\n      &lt;WrapUnwrapWidget /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"_archive/DEX_REFACTORING_SUMMARY/#advanced-usage","title":"Advanced Usage","text":"<pre><code>import { useTokenList, useSwapQuote } from '../components/dex';\n\nfunction CustomSwap() {\n  const { tokens, loading } = useTokenList();\n  const { quoteLoading, error, routeInfo } = useSwapQuote();\n\n  // Custom implementation\n}\n</code></pre>"},{"location":"_archive/DEX_REFACTORING_SUMMARY/#next-steps","title":"Next Steps","text":""},{"location":"_archive/DEX_REFACTORING_SUMMARY/#immediate","title":"Immediate","text":"<ol> <li>Test the refactored components</li> <li>Update routing to use <code>DexRefactored.tsx</code></li> <li>Add comprehensive unit tests</li> </ol>"},{"location":"_archive/DEX_REFACTORING_SUMMARY/#future","title":"Future","text":"<ol> <li>Implement error boundaries</li> <li>Add loading skeletons</li> <li>Improve accessibility</li> <li>Add more widget components</li> <li>Implement advanced routing features</li> </ol>"},{"location":"_archive/DEX_REFACTORING_SUMMARY/#conclusion","title":"Conclusion","text":"<p>The DEX refactoring successfully transformed a monolithic 1335-line component into a modular, maintainable architecture with:</p> <ul> <li>15+ focused components</li> <li>4 custom hooks</li> <li>Comprehensive TypeScript types</li> <li>Better separation of concerns</li> <li>Improved developer experience</li> <li>Enhanced maintainability</li> </ul> <p>The refactoring preserves all original functionality while providing a solid foundation for future development and maintenance.</p>"},{"location":"_archive/EXTENSIONS/","title":"Superhero App Extensions","text":"<p>[!NOTE] For a step-by-step walkthrough, see How to build a Superhero App Extension (Polls example).</p> <p>Extensions are first-class modules that can add routes, menu items, feed entries, composer actions, item actions, modals, and composer attachments. They are authored with the existing plugin SDK and loaded at runtime.</p>"},{"location":"_archive/EXTENSIONS/#capabilities","title":"Capabilities","text":"<ul> <li>routes: add pages (mounted dynamically via routeRegistry)</li> <li>menu: add header navigation items (merged via navRegistry)</li> <li>feed: contribute feed entries and renderers</li> <li>composer: add composer actions and attachments</li> <li>item-actions: add per-feed-item actions</li> <li>modals: register modal components</li> </ul>"},{"location":"_archive/EXTENSIONS/#authoring-an-extension","title":"Authoring an extension","text":"<p>Minimal example: <pre><code>import React from 'react';\nimport { definePlugin } from '@/plugin-sdk';\nimport MyApp from './ui/MyApp';\n\nexport default definePlugin({\n  meta: {\n    id: 'my-ext',\n    name: 'My Extension',\n    version: '0.1.0',\n    apiVersion: '1.x',\n    capabilities: ['routes', 'composer'],\n  },\n  setup({ register }) {\n    register({\n      routes: [{ path: '/my-ext', element: &lt;MyApp /&gt; }],\n      menu: [{ id: 'my-ext', label: 'My Ext', path: '/my-ext', icon: '\ud83e\udde9' }],\n      // attachments: () =&gt; [myAttachmentSpec],\n    });\n  },\n});\n</code></pre></p>"},{"location":"_archive/EXTENSIONS/#loading-modes","title":"Loading modes","text":"<ul> <li>Local (first\u2011party): register in <code>src/plugins/local.ts</code> for development. Not enabled by default in production.</li> <li>External (remote URLs): <code>CONFIG.PLUGINS</code> can point to remote modules. The loader enforces the <code>capabilities</code> allowlist.</li> </ul>"},{"location":"_archive/EXTENSIONS/#capability-allowlist","title":"Capability allowlist","text":"<ul> <li>Use <code>CONFIG.PLUGIN_CAPABILITIES_ALLOWLIST</code> to restrict what plugins may register, e.g. <code>['routes','feed','composer']</code>.</li> </ul>"},{"location":"_archive/EXTENSIONS/#registries-lifecycle","title":"Registries lifecycle","text":"<ul> <li>Registries live in <code>features/social/plugins/registries.ts</code>.</li> <li>In development, local loader resets registries on hot reload to avoid duplicates.</li> <li>Plugin bootstrap is guarded to run once per app lifecycle.</li> </ul>"},{"location":"_archive/EXTENSIONS/#contracts","title":"Contracts","text":"<p>Use <code>createContractLoader(sdk)</code> from <code>src/extensions/contract.ts</code> to load ACI-based contract instances.</p>"},{"location":"_archive/EXTENSIONS/#backend-integration","title":"Backend integration","text":"<p>Point your extension to backend services. For Social Superhero governance backend, see: - repo: https://github.com/superhero-com/superhero-api - flow: index chain data \u2192 expose REST/WebSocket \u2192 consume from extension client</p>"},{"location":"_archive/EXTENSIONS/#environment-config","title":"Environment &amp; config","text":"<ul> <li><code>public/superconfig.json</code> (or <code>window.__SUPERCONFIG__</code>) provides runtime keys like <code>NODE_URL</code>, <code>MIDDLEWARE_URL</code>, <code>GOVERNANCE_API_URL</code>, <code>PLUGINS</code>, <code>PLUGIN_CAPABILITIES_ALLOWLIST</code>.</li> </ul>"},{"location":"_archive/EXTENSIONS/#ci","title":"CI","text":"<ul> <li><code>npm run ext:check</code> validates extension modules. The CI workflow runs it on pull requests.</li> </ul>"},{"location":"_archive/EXTENSIONS/#security-ux-notes","title":"Security &amp; UX notes","text":"<ul> <li>Keep capabilities minimal; prefer read-only routes for untrusted plugins.</li> <li>Gating composer/actions behind the allowlist reduces risk.</li> <li>Validate inputs and handle network failures gracefully.</li> </ul>"},{"location":"_archive/EXTENSIONS/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Duplicate nav or routes: ensure bootstrap runs once; in dev registries are reset before loading local plugins.</li> <li>Wallet not connected: ensure wallet connect flow completes before signing.</li> <li>ACI mismatch: recompile and update contract address.</li> </ul>"},{"location":"_archive/EXTENSIONS/#full-tutorial-polls-example","title":"Full tutorial (Polls example)","text":"<p>See the detailed guide: <code>docs/tutorials/build-governance-poll-extension.md</code></p>"},{"location":"_archive/MIGRATION_COMPLETE/","title":"DEX Migration Complete! \ud83c\udf89","text":""},{"location":"_archive/MIGRATION_COMPLETE/#what-was-accomplished","title":"What Was Accomplished","text":"<p>\u2705 Successfully migrated the monolithic DEX component (1335 lines) to a modular architecture</p>"},{"location":"_archive/MIGRATION_COMPLETE/#files-movedupdated","title":"Files Moved/Updated:","text":"<ul> <li>Archived: <code>src/views/Dex.tsx</code> \u2192 <code>src/archive/Dex.original.tsx</code></li> <li>New: <code>src/views/DexRefactored.tsx</code> \u2192 <code>src/views/Dex.tsx</code> (now the active component)</li> </ul>"},{"location":"_archive/MIGRATION_COMPLETE/#new-architecture-created","title":"New Architecture Created:","text":"<pre><code>src/components/dex/\n\u251c\u2500\u2500 core/           # 6 core components\n\u251c\u2500\u2500 widgets/        # 3 specialized widgets  \n\u251c\u2500\u2500 supporting/     # 1 supporting component\n\u251c\u2500\u2500 hooks/          # 4 custom hooks\n\u251c\u2500\u2500 types/          # TypeScript definitions\n\u2514\u2500\u2500 index.ts        # Clean exports\n</code></pre>"},{"location":"_archive/MIGRATION_COMPLETE/#components-created","title":"Components Created","text":""},{"location":"_archive/MIGRATION_COMPLETE/#core-components-6","title":"Core Components (6)","text":"<ol> <li>SwapForm.tsx - Main swap interface orchestrator</li> <li>TokenInput.tsx - Token selection + amount input</li> <li>TokenSelector.tsx - Enhanced token selection with search</li> <li>SwapSettings.tsx - Slippage and deadline configuration</li> <li>SwapRouteInfo.tsx - Route information display</li> <li>SwapConfirmation.tsx - Confirmation modal</li> </ol>"},{"location":"_archive/MIGRATION_COMPLETE/#widget-components-3","title":"Widget Components (3)","text":"<ol> <li>WrapUnwrapWidget.tsx - AE \u2194 WAE conversion</li> <li>EthxitWidget.tsx - aeETH \u2192 AE conversion</li> <li>EthBridgeWidget.tsx - ETH \u2192 AE bridge + swap</li> </ol>"},{"location":"_archive/MIGRATION_COMPLETE/#supporting-components-1","title":"Supporting Components (1)","text":"<ol> <li>RecentActivity.tsx - Transaction history</li> </ol>"},{"location":"_archive/MIGRATION_COMPLETE/#custom-hooks-4","title":"Custom Hooks (4)","text":"<ol> <li>useTokenList.ts - Token management</li> <li>useTokenBalances.ts - Balance fetching</li> <li>useSwapQuote.ts - Quote handling with debouncing</li> <li>useSwapExecution.ts - Transaction execution</li> </ol>"},{"location":"_archive/MIGRATION_COMPLETE/#key-benefits-achieved","title":"Key Benefits Achieved","text":"<p>\u2705 Maintainability - Each component has a single responsibility \u2705 Reusability - Components can be used independently \u2705 Testability - Smaller components are easier to test \u2705 Developer Experience - Better code organization and TypeScript support \u2705 Performance - Better code splitting potential  </p>"},{"location":"_archive/MIGRATION_COMPLETE/#current-status","title":"Current Status","text":""},{"location":"_archive/MIGRATION_COMPLETE/#completed","title":"\u2705 Completed","text":"<ul> <li>Full component refactoring</li> <li>Custom hooks implementation</li> <li>TypeScript type system</li> <li>Component exports and documentation</li> <li>File migration and routing update</li> <li>Syntax error fixes</li> </ul>"},{"location":"_archive/MIGRATION_COMPLETE/#known-issues","title":"\u26a0\ufe0f Known Issues","text":"<ul> <li>Tests: The existing tests need to be updated for the new component structure</li> <li>WAE ACI: Using a mock ACI file (needs real ACI in production)</li> <li>JSX in hooks: Converted to React.createElement for compatibility</li> </ul>"},{"location":"_archive/MIGRATION_COMPLETE/#next-steps","title":"\ud83d\udd04 Next Steps","text":""},{"location":"_archive/MIGRATION_COMPLETE/#immediate-recommended","title":"Immediate (Recommended)","text":"<ol> <li>Test the new component manually in the browser</li> <li>Update existing tests to work with new component structure</li> <li>Add comprehensive unit tests for new components</li> <li>Replace mock WAE ACI with real ACI file when available</li> </ol>"},{"location":"_archive/MIGRATION_COMPLETE/#future-improvements","title":"Future Improvements","text":"<ol> <li>Error boundaries for better error handling</li> <li>Loading skeletons for better UX</li> <li>Accessibility improvements</li> <li>Performance optimizations</li> <li>Additional widget components</li> </ol>"},{"location":"_archive/MIGRATION_COMPLETE/#usage","title":"Usage","text":"<p>The new refactored DEX is now active and accessible at <code>/dex</code>. All functionality has been preserved while providing a much more maintainable architecture.</p>"},{"location":"_archive/MIGRATION_COMPLETE/#basic-usage","title":"Basic Usage","text":"<pre><code>// The main Dex component now uses the refactored architecture\nimport Dex from '../views/Dex'; // This now uses the new modular components\n</code></pre>"},{"location":"_archive/MIGRATION_COMPLETE/#advanced-usage","title":"Advanced Usage","text":"<pre><code>// Individual components can be used independently\nimport { SwapForm, WrapUnwrapWidget } from '../components/dex';\n\n// Custom hooks can be used for specific functionality\nimport { useTokenList, useSwapQuote } from '../components/dex';\n</code></pre>"},{"location":"_archive/MIGRATION_COMPLETE/#documentation","title":"Documentation","text":"<ul> <li>Component Documentation: <code>src/components/dex/README.md</code></li> <li>Migration Summary: <code>DEX_REFACTORING_SUMMARY.md</code></li> <li>Original Component: <code>src/archive/Dex.original.tsx</code> (for reference)</li> </ul>"},{"location":"_archive/MIGRATION_COMPLETE/#conclusion","title":"Conclusion","text":"<p>The DEX refactoring has been successfully completed! The monolithic 1335-line component has been transformed into a modular, maintainable architecture with:</p> <ul> <li>15+ focused components</li> <li>4 custom hooks </li> <li>Comprehensive TypeScript types</li> <li>Better separation of concerns</li> <li>Improved developer experience</li> </ul> <p>The application is now using the new refactored DEX component, and all original functionality has been preserved while providing a solid foundation for future development and maintenance.</p> <p>\ud83d\ude80 Ready for production use!</p>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/","title":"Mobile Optimizations for Superhero React App","text":"<p>This document outlines all the mobile optimizations implemented to enhance the user experience on mobile devices.</p>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#overview","title":"\ud83c\udfaf Overview","text":"<p>The application has been comprehensively optimized for mobile devices with a focus on: - Touch-friendly interactions - Larger touch targets and better feedback - Mobile-first responsive design - Progressive enhancement from mobile to desktop - Performance optimizations - Faster loading and smoother interactions - Enhanced mobile navigation - Intuitive mobile-specific navigation - Mobile-specific components - Optimized forms, buttons, and layouts - Native ETH -&gt; AE swap interface - Replaced iframe with mobile-optimized component</p>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#latest-updates","title":"\ud83d\ude80 Latest Updates","text":""},{"location":"_archive/MOBILE_OPTIMIZATIONS/#eth-ae-component-replacement","title":"ETH -&gt; AE Component Replacement","text":"<ul> <li>Location: <code>src/components/SwapCard.tsx</code></li> <li>Change: Removed iframe-based Superhero Swap integration and replaced with native mobile-optimized ETH -&gt; AE swap component</li> <li>Features:</li> <li>Native mobile-optimized interface using <code>MobileInput</code>, <code>AeButton</code>, and <code>MobileCard</code> components</li> <li>Direct integration with \u00e6ternity DEX for aeETH \u2192 AE swaps</li> <li>Wallet connection and address display</li> <li>Real-time quote fetching and swap execution</li> <li>Configurable slippage settings</li> <li>Error handling and user feedback</li> <li>Touch-friendly input fields and buttons</li> <li>Responsive design that works on all screen sizes</li> <li>Link to external Superhero Swap for ETH \u2192 aeETH bridging</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#benefits-of-native-component","title":"Benefits of Native Component","text":"<ul> <li>Better Performance: No iframe loading delays or cross-origin restrictions</li> <li>Improved UX: Seamless integration with app's design system and navigation</li> <li>Mobile Optimization: Touch-friendly interface with proper spacing and sizing</li> <li>Offline Capability: Works without external dependencies (except for bridging)</li> <li>Better Error Handling: Native error messages and retry mechanisms</li> <li>Accessibility: Proper ARIA labels and keyboard navigation</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#scss-compilation-fixes","title":"SCSS Compilation Fixes","text":"<ul> <li>Issue: SCSS compilation errors due to <code>$accent_color</code> variable conflicts with CSS custom properties</li> <li>Solution: Replaced <code>$accent_color</code> with direct color values (<code>#007bff</code>) in affected files:</li> <li><code>src/components/Trendminer/ExploreTrendsSidebar.scss</code></li> <li><code>src/components/Trendminer/LatestTransactionsCarousel.scss</code></li> <li><code>src/views/Trendminer/TokenDetails.scss</code></li> <li>Result: Eliminated SCSS compilation errors and improved build stability</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#mobile-navigation","title":"\ufffd\ufffd Mobile Navigation","text":""},{"location":"_archive/MOBILE_OPTIMIZATIONS/#enhanced-mobile-navigation-component","title":"Enhanced Mobile Navigation Component","text":"<ul> <li>Location: <code>src/components/layout/MobileNavigation.tsx</code></li> <li>Features:</li> <li>Full-screen overlay navigation menu</li> <li>Touch-friendly navigation items (56px minimum height)</li> <li>Smooth animations and transitions</li> <li>Theme toggle integration</li> <li>Search functionality integration</li> <li>Better visual feedback on touch</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#mobile-navigation-styles","title":"Mobile Navigation Styles","text":"<ul> <li>Location: <code>src/components/layout/MobileNavigation.scss</code></li> <li>Improvements:</li> <li>Better touch targets (44px minimum)</li> <li>Improved visual hierarchy</li> <li>Smooth transitions and animations</li> <li>Better contrast and readability</li> <li>Responsive design for different screen sizes</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#mobile-optimized-components","title":"\ud83c\udfa8 Mobile-Optimized Components","text":""},{"location":"_archive/MOBILE_OPTIMIZATIONS/#1-mobileinput-component","title":"1. MobileInput Component","text":"<ul> <li>Location: <code>src/components/MobileInput.tsx</code> &amp; <code>src/components/MobileInput.scss</code></li> <li>Features:</li> <li>Touch-friendly input fields (48px minimum height)</li> <li>Prevents zoom on iOS (16px font size)</li> <li>Better focus states and visual feedback</li> <li>Icon support (left/right icons)</li> <li>Error and helper text display</li> <li>Multiple variants (default, filled, outlined)</li> <li>Multiple sizes (small, medium, large)</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#2-mobilecard-component","title":"2. MobileCard Component","text":"<ul> <li>Location: <code>src/components/MobileCard.tsx</code> &amp; <code>src/components/MobileCard.scss</code></li> <li>Features:</li> <li>Touch-friendly clickable cards</li> <li>Loading states with skeleton animations</li> <li>Multiple variants (default, elevated, outlined, filled)</li> <li>Responsive padding options</li> <li>Smooth hover and active states</li> <li>Better visual hierarchy</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#3-enhanced-aebutton-component","title":"3. Enhanced AeButton Component","text":"<ul> <li>Location: <code>src/components/AeButton.scss</code></li> <li>Improvements:</li> <li>Larger touch targets (48px minimum)</li> <li>Better visual feedback on touch</li> <li>Multiple size variants (small, medium, large)</li> <li>Block variant for full-width buttons</li> <li>Icon-only variant</li> <li>Improved hover and active states</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#layout-optimizations","title":"\ud83c\udfd7\ufe0f Layout Optimizations","text":""},{"location":"_archive/MOBILE_OPTIMIZATIONS/#shell-layout","title":"Shell Layout","text":"<ul> <li>Location: <code>src/components/layout/Shell.scss</code></li> <li>Improvements:</li> <li>Mobile-first responsive grid</li> <li>Better spacing for mobile devices</li> <li>Improved sidebar handling on mobile</li> <li>Account for mobile navigation height</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#app-container","title":"App Container","text":"<ul> <li>Location: <code>src/App.tsx</code> &amp; <code>src/styles/mobile-optimizations.scss</code></li> <li>Improvements:</li> <li>Mobile-optimized container structure</li> <li>Better responsive breakpoints</li> <li>Improved loading states</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#base-styles-mixins","title":"\ud83c\udfa8 Base Styles &amp; Mixins","text":""},{"location":"_archive/MOBILE_OPTIMIZATIONS/#enhanced-base-styles","title":"Enhanced Base Styles","text":"<ul> <li>Location: <code>src/styles/base.scss</code></li> <li>Improvements:</li> <li>Touch-friendly minimum sizes (44px)</li> <li>Better viewport handling</li> <li>Improved typography for mobile</li> <li>Better form controls</li> <li>Performance optimizations</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#comprehensive-mixins","title":"Comprehensive Mixins","text":"<ul> <li>Location: <code>src/styles/mixins.scss</code></li> <li>New Mixins:</li> <li><code>mobile-small</code> (\u2264480px)</li> <li><code>mobile-large</code> (\u22641024px)</li> <li><code>tablet</code> (769px-1024px)</li> <li><code>desktop</code> (\u22651025px)</li> <li><code>mobile-first</code> - Mobile-first responsive approach</li> <li><code>touch-spacing</code> - Touch-friendly spacing</li> <li><code>mobile-grid</code> - Mobile-optimized grid layouts</li> <li><code>mobile-flex</code> - Mobile-optimized flex layouts</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#mobile-specific-optimizations","title":"\ud83d\udcf1 Mobile-Specific Optimizations","text":""},{"location":"_archive/MOBILE_OPTIMIZATIONS/#app-level-mobile-styles","title":"App-Level Mobile Styles","text":"<ul> <li>Location: <code>src/styles/mobile-optimizations.scss</code></li> <li>Features:</li> <li>Mobile-optimized containers and grids</li> <li>Touch-friendly forms and buttons</li> <li>Mobile-specific navigation styles</li> <li>Optimized modals and overlays</li> <li>Better loading and empty states</li> <li>Performance optimizations</li> <li>Accessibility improvements</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#top-navigation","title":"Top Navigation","text":"<ul> <li>Location: <code>src/components/layout/TopNav.scss</code></li> <li>Improvements:</li> <li>Hidden on mobile (uses mobile navigation instead)</li> <li>Better responsive design for tablet/desktop</li> <li>Improved visual hierarchy</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#performance-optimizations","title":"\ud83d\ude80 Performance Optimizations","text":""},{"location":"_archive/MOBILE_OPTIMIZATIONS/#mobile-performance","title":"Mobile Performance","text":"<ul> <li>Reduced animation durations for better performance</li> <li>Optimized scrolling with <code>-webkit-overflow-scrolling: touch</code></li> <li>Respect for <code>prefers-reduced-motion</code> user preference</li> <li>Better touch feedback with <code>touch-action: manipulation</code></li> <li>Optimized loading states and skeleton animations</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#build-optimizations","title":"Build Optimizations","text":"<ul> <li>Mobile-first CSS architecture</li> <li>Efficient responsive breakpoints</li> <li>Optimized bundle sizes for mobile</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#touch-friendly-features","title":"\ud83c\udfaf Touch-Friendly Features","text":""},{"location":"_archive/MOBILE_OPTIMIZATIONS/#minimum-touch-targets","title":"Minimum Touch Targets","text":"<ul> <li>All interactive elements: 44px minimum (48px on mobile)</li> <li>Buttons and links: 48px minimum height/width</li> <li>Form inputs: 48px minimum height</li> <li>Navigation items: 56px minimum height</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#touch-feedback","title":"Touch Feedback","text":"<ul> <li>Visual feedback on touch/active states</li> <li>Smooth transitions and animations</li> <li>Better hover states for touch devices</li> <li>Improved focus indicators</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#responsive-design","title":"\ud83d\udcd0 Responsive Design","text":""},{"location":"_archive/MOBILE_OPTIMIZATIONS/#breakpoints","title":"Breakpoints","text":"<ul> <li>Mobile Small: \u2264480px</li> <li>Mobile: \u2264768px</li> <li>Tablet: 769px-1024px</li> <li>Desktop: \u22651025px</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#mobile-first-approach","title":"Mobile-First Approach","text":"<ul> <li>Styles start with mobile as the base</li> <li>Progressive enhancement for larger screens</li> <li>Efficient CSS with minimal overrides</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#visual-improvements","title":"\ud83c\udfa8 Visual Improvements","text":""},{"location":"_archive/MOBILE_OPTIMIZATIONS/#mobile-typography","title":"Mobile Typography","text":"<ul> <li>Optimized font sizes for mobile readability</li> <li>Better line heights and spacing</li> <li>Improved contrast ratios</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#mobile-spacing","title":"Mobile Spacing","text":"<ul> <li>Consistent 16px base spacing</li> <li>Reduced to 12px on small mobile devices</li> <li>Better visual hierarchy</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#mobile-colors-themes","title":"Mobile Colors &amp; Themes","text":"<ul> <li>Optimized for both light and dark themes</li> <li>Better contrast for mobile viewing</li> <li>Improved accessibility</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#usage-examples","title":"\ud83d\udd27 Usage Examples","text":""},{"location":"_archive/MOBILE_OPTIMIZATIONS/#using-mobile-components","title":"Using Mobile Components","text":"<pre><code>// Mobile-optimized input\n&lt;MobileInput\n  label=\"Amount\"\n  placeholder=\"Enter amount\"\n  variant=\"filled\"\n  size=\"large\"\n  leftIcon={&lt;IconWallet /&gt;}\n/&gt;\n\n// Mobile-optimized card\n&lt;MobileCard\n  variant=\"elevated\"\n  padding=\"medium\"\n  clickable\n  onClick={handleClick}\n&gt;\n  &lt;h3&gt;Card Title&lt;/h3&gt;\n  &lt;p&gt;Card content&lt;/p&gt;\n&lt;/MobileCard&gt;\n\n// Mobile-optimized button\n&lt;AeButton\n  className=\"large block\"\n  green\n  onClick={handleAction}\n&gt;\n  Connect Wallet\n&lt;/AeButton&gt;\n</code></pre>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#using-mobile-classes","title":"Using Mobile Classes","text":"<pre><code>// Mobile-optimized layout\n&lt;div className=\"mobile-container\"&gt;\n  &lt;div className=\"mobile-grid\"&gt;\n    &lt;div className=\"mobile-card\"&gt;Content&lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;form className=\"mobile-form\"&gt;\n    &lt;div className=\"form-group\"&gt;\n      &lt;MobileInput label=\"Field\" /&gt;\n    &lt;/div&gt;\n\n    &lt;div className=\"mobile-button-group\"&gt;\n      &lt;AeButton&gt;Cancel&lt;/AeButton&gt;\n      &lt;AeButton green&gt;Submit&lt;/AeButton&gt;\n    &lt;/div&gt;\n  &lt;/form&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#testing","title":"\ud83e\uddea Testing","text":""},{"location":"_archive/MOBILE_OPTIMIZATIONS/#mobile-testing-checklist","title":"Mobile Testing Checklist","text":"<ul> <li>[ ] Touch targets are at least 44px (48px preferred)</li> <li>[ ] No horizontal scrolling on mobile</li> <li>[ ] Forms work well on mobile keyboards</li> <li>[ ] Navigation is intuitive on mobile</li> <li>[ ] Loading states are smooth</li> <li>[ ] Animations are performant</li> <li>[ ] Text is readable on small screens</li> <li>[ ] Buttons are easy to tap</li> <li>[ ] Modals work well on mobile</li> <li>[ ] Search functionality is mobile-friendly</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#browser-testing","title":"Browser Testing","text":"<ul> <li>iOS Safari</li> <li>Android Chrome</li> <li>Mobile Firefox</li> <li>Mobile Edge</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#performance-metrics","title":"\ud83d\udcc8 Performance Metrics","text":""},{"location":"_archive/MOBILE_OPTIMIZATIONS/#mobile-performance-targets","title":"Mobile Performance Targets","text":"<ul> <li>First Contentful Paint: &lt; 1.5s</li> <li>Largest Contentful Paint: &lt; 2.5s</li> <li>Cumulative Layout Shift: &lt; 0.1</li> <li>First Input Delay: &lt; 100ms</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#bundle-size-optimizations","title":"Bundle Size Optimizations","text":"<ul> <li>Mobile-first CSS architecture</li> <li>Efficient responsive breakpoints</li> <li>Optimized component imports</li> <li>Lazy loading for non-critical components</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#trendminer-mobile-optimizations","title":"\ud83d\ude80 Trendminer Mobile Optimizations","text":""},{"location":"_archive/MOBILE_OPTIMIZATIONS/#optimized-trendminer-components","title":"Optimized Trendminer Components","text":""},{"location":"_archive/MOBILE_OPTIMIZATIONS/#1-exploretrendssidebar-component","title":"1. ExploreTrendsSidebar Component","text":"<ul> <li>Location: <code>src/components/Trendminer/ExploreTrendsSidebar.tsx</code> &amp; <code>src/components/Trendminer/ExploreTrendsSidebar.scss</code></li> <li>Mobile Improvements:</li> <li>Responsive layout with mobile-first design</li> <li>Touch-friendly trend item cards with 44px minimum touch targets</li> <li>Mobile-optimized search input with 16px font size (prevents iOS zoom)</li> <li>Collapsible configuration panel for better mobile UX</li> <li>Improved visual hierarchy and spacing for mobile screens</li> <li>Smooth animations and transitions optimized for mobile performance</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#2-latesttransactionscarousel-component","title":"2. LatestTransactionsCarousel Component","text":"<ul> <li>Location: <code>src/components/Trendminer/LatestTransactionsCarousel.tsx</code> &amp; <code>src/components/Trendminer/LatestTransactionsCarousel.scss</code></li> <li>Mobile Improvements:</li> <li>Responsive carousel with mobile-optimized card sizes</li> <li>Touch-friendly transaction cards with proper spacing</li> <li>Smooth scrolling animations with reduced motion support</li> <li>Mobile-specific gradient overlays for better visual feedback</li> <li>Optimized typography and spacing for small screens</li> <li>Pause animation on hover for better mobile interaction</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#3-tokendetails-component","title":"3. TokenDetails Component","text":"<ul> <li>Location: <code>src/views/Trendminer/TokenDetails.tsx</code> &amp; <code>src/views/Trendminer/TokenDetails.scss</code></li> <li>Mobile Improvements:</li> <li>Mobile-first responsive layout with stacked sections</li> <li>Touch-friendly action buttons with 44px minimum height</li> <li>Mobile-optimized chart controls with larger touch targets</li> <li>Responsive tab navigation with improved mobile UX</li> <li>Mobile-specific loading and error states</li> <li>Optimized typography and spacing for mobile readability</li> <li>Collapsible configuration sections for better mobile organization</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#4-trendcloud-component","title":"4. TrendCloud Component","text":"<ul> <li>Location: <code>src/views/Trendminer/TrendCloud.tsx</code> &amp; <code>src/views/Trendminer/TrendCloud.scss</code></li> <li>Mobile Improvements:</li> <li>Responsive word cloud with mobile-optimized sizing</li> <li>Touch-friendly configuration controls with proper spacing</li> <li>Mobile-specific grid layout for trend items</li> <li>Collapsible configuration panel to save mobile screen space</li> <li>Optimized hover tooltips for touch devices</li> <li>Mobile-optimized search and filter controls</li> <li>Responsive chart containers with proper mobile scaling</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#mobile-specific-features","title":"Mobile-Specific Features","text":""},{"location":"_archive/MOBILE_OPTIMIZATIONS/#touch-friendly-interactions","title":"Touch-Friendly Interactions","text":"<ul> <li>All interactive elements have minimum 44px touch targets</li> <li>Improved touch feedback with visual state changes</li> <li>Optimized button sizes and spacing for mobile fingers</li> <li>Better hover states that work well on touch devices</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#mobile-performance-optimizations","title":"Mobile Performance Optimizations","text":"<ul> <li>Reduced animation durations for better mobile performance</li> <li>Optimized loading states with mobile-specific spinners</li> <li>Efficient responsive breakpoints to minimize CSS overhead</li> <li>Touch-optimized scrolling with <code>-webkit-overflow-scrolling: touch</code></li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#mobile-navigation-improvements","title":"Mobile Navigation Improvements","text":"<ul> <li>Mobile-optimized tab navigation with larger touch targets</li> <li>Responsive grid layouts that adapt to mobile screen sizes</li> <li>Collapsible sections to maximize mobile screen real estate</li> <li>Better visual hierarchy for mobile scanning</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#mobile-specific-styling","title":"Mobile-Specific Styling","text":"<ul> <li>16px font sizes on inputs to prevent iOS zoom</li> <li>Mobile-optimized spacing and padding throughout</li> <li>Better contrast ratios for mobile viewing conditions</li> <li>Responsive typography that scales appropriately</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#mobile-testing-checklist-for-trendminer","title":"Mobile Testing Checklist for Trendminer","text":"<ul> <li>[ ] All trend items are easily tappable on mobile</li> <li>[ ] Carousel animations are smooth on mobile devices</li> <li>[ ] Token details page is fully responsive</li> <li>[ ] Word cloud is usable on touch devices</li> <li>[ ] Configuration panels work well on mobile</li> <li>[ ] Search and filter controls are mobile-friendly</li> <li>[ ] Loading states are optimized for mobile</li> <li>[ ] Error handling works well on mobile devices</li> <li>[ ] Charts and visualizations are mobile-responsive</li> <li>[ ] Navigation between sections is intuitive on mobile</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#dex-mobile-optimizations","title":"\ud83d\ude80 DEX Mobile Optimizations","text":""},{"location":"_archive/MOBILE_OPTIMIZATIONS/#enhanced-dex-components","title":"Enhanced DEX Components","text":"<ul> <li>Location: <code>src/views/Dex.tsx</code> &amp; <code>src/views/Dex.scss</code></li> <li>Features:</li> <li>Mobile-optimized layout with responsive design</li> <li>Touch-friendly form inputs (48px minimum height)</li> <li>Mobile-specific token selector with modal interface</li> <li>Responsive DEX tabs with proper touch targets</li> <li>Mobile-optimized buttons and interactive elements</li> <li>Better spacing and typography for mobile devices</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#dex-mobile-components","title":"DEX Mobile Components","text":"<ul> <li>MobileDexCard: <code>src/components/dex/MobileDexCard.tsx</code></li> <li>Touch-friendly card component with loading states</li> <li>Multiple variants and responsive padding</li> <li> <p>Skeleton loading animations</p> </li> <li> <p>MobileTokenSelector: <code>src/components/dex/MobileTokenSelector.tsx</code></p> </li> <li>Mobile-optimized token selection modal</li> <li>Touch-friendly search interface</li> <li> <p>Proper keyboard handling and accessibility</p> </li> <li> <p>MobileDexInput: <code>src/components/dex/MobileDexInput.tsx</code></p> </li> <li>Mobile-optimized input fields</li> <li>Prevents zoom on iOS (16px font size)</li> <li> <p>Better focus states and validation</p> </li> <li> <p>MobileDexButton: <code>src/components/dex/MobileDexButton.tsx</code></p> </li> <li>Touch-friendly buttons with loading states</li> <li>Multiple variants and sizes</li> <li>Proper touch feedback</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#dex-mobile-features","title":"DEX Mobile Features","text":"<ul> <li>Responsive Layout: Adapts to different screen sizes</li> <li>Touch-Friendly: All interactive elements meet 44px minimum</li> <li>Mobile Navigation: Optimized tabs and navigation</li> <li>Form Optimization: Better mobile keyboard handling</li> <li>Loading States: Smooth loading indicators</li> <li>Error Handling: Mobile-friendly error messages</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#future-enhancements","title":"\ud83d\udd04 Future Enhancements","text":""},{"location":"_archive/MOBILE_OPTIMIZATIONS/#planned-mobile-improvements","title":"Planned Mobile Improvements","text":"<ul> <li>[ ] PWA (Progressive Web App) features</li> <li>[ ] Offline functionality</li> <li>[ ] Mobile-specific gestures</li> <li>[ ] Enhanced mobile animations</li> <li>[ ] Mobile-specific error handling</li> <li>[ ] Better mobile keyboard handling</li> <li>[ ] Mobile-specific accessibility features</li> <li>[ ] DEX-specific mobile optimizations</li> <li>[ ] Swipe gestures for token switching</li> <li>[ ] Mobile-optimized price charts</li> <li>[ ] Touch-friendly slippage adjustment</li> <li>[ ] Mobile-specific transaction confirmations</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#resources","title":"\ud83d\udcda Resources","text":""},{"location":"_archive/MOBILE_OPTIMIZATIONS/#mobile-development-best-practices","title":"Mobile Development Best Practices","text":"<ul> <li>Google Mobile Guidelines</li> <li>Apple Human Interface Guidelines</li> <li>Material Design Mobile</li> </ul>"},{"location":"_archive/MOBILE_OPTIMIZATIONS/#testing-tools","title":"Testing Tools","text":"<ul> <li>Chrome DevTools Mobile Emulation</li> <li>BrowserStack Mobile Testing</li> <li>Lighthouse Mobile Audits</li> <li>WebPageTest Mobile Testing</li> </ul> <p>Note: All mobile optimizations are designed to work seamlessly with the existing desktop experience while providing an enhanced mobile experience. The mobile-first approach ensures that the application performs well across all device sizes.</p>"},{"location":"_archive/POOL_EXPLORE_REFACTORING_SUMMARY/","title":"Pool &amp; Explore Refactoring Complete! \ud83c\udf89","text":""},{"location":"_archive/POOL_EXPLORE_REFACTORING_SUMMARY/#overview","title":"Overview","text":"<p>Successfully refactored both Pool and Explore components from monolithic structures into modular, maintainable architectures with improved layouts and enhanced functionality.</p>"},{"location":"_archive/POOL_EXPLORE_REFACTORING_SUMMARY/#what-was-accomplished","title":"What Was Accomplished","text":""},{"location":"_archive/POOL_EXPLORE_REFACTORING_SUMMARY/#pool-component-refactoring","title":"\u2705 Pool Component Refactoring","text":"<p>Archived: <code>src/views/Pool.tsx</code> \u2192 <code>src/archive/Pool.original.tsx</code> New: <code>src/views/PoolRefactored.tsx</code> \u2192 <code>src/views/Pool.tsx</code></p>"},{"location":"_archive/POOL_EXPLORE_REFACTORING_SUMMARY/#new-architecture-created","title":"New Architecture Created:","text":"<pre><code>src/components/pool/\n\u251c\u2500\u2500 core/                    # Core components\n\u2502   \u251c\u2500\u2500 LiquidityPositionCard.tsx\n\u2502   \u2514\u2500\u2500 AddLiquidityForm.tsx\n\u251c\u2500\u2500 hooks/                   # Custom hooks\n\u2502   \u251c\u2500\u2500 useLiquidityPositions.ts\n\u2502   \u2514\u2500\u2500 useAddLiquidity.ts\n\u251c\u2500\u2500 types/                   # TypeScript definitions\n\u2502   \u2514\u2500\u2500 pool.ts\n\u2514\u2500\u2500 index.ts                 # Clean exports\n</code></pre>"},{"location":"_archive/POOL_EXPLORE_REFACTORING_SUMMARY/#key-improvements","title":"Key Improvements:","text":"<ol> <li>Enhanced Layout: Modern card-based design with stats overview</li> <li>Tab Navigation: Separate views for positions and add liquidity</li> <li>Stats Dashboard: Total positions, value, and fees earned</li> <li>Better UX: Empty states with clear call-to-actions</li> <li>Modular Components: Reusable position cards and forms</li> <li>Type Safety: Comprehensive TypeScript interfaces</li> </ol>"},{"location":"_archive/POOL_EXPLORE_REFACTORING_SUMMARY/#explore-component-refactoring","title":"\u2705 Explore Component Refactoring","text":"<p>Archived: <code>src/views/Explore.tsx</code> \u2192 <code>src/archive/Explore.original.tsx</code> New: <code>src/views/ExploreRefactored.tsx</code> \u2192 <code>src/views/Explore.tsx</code></p>"},{"location":"_archive/POOL_EXPLORE_REFACTORING_SUMMARY/#new-architecture-created_1","title":"New Architecture Created:","text":"<pre><code>src/components/explore/\n\u251c\u2500\u2500 core/                    # Core components\n\u2502   \u2514\u2500\u2500 TokenTable.tsx\n\u251c\u2500\u2500 hooks/                   # Custom hooks\n\u2502   \u251c\u2500\u2500 useTokenList.ts\n\u2502   \u251c\u2500\u2500 usePairList.ts\n\u2502   \u2514\u2500\u2500 useTransactionList.ts\n\u251c\u2500\u2500 types/                   # TypeScript definitions\n\u2502   \u2514\u2500\u2500 explore.ts\n\u2514\u2500\u2500 index.ts                 # Clean exports\n</code></pre>"},{"location":"_archive/POOL_EXPLORE_REFACTORING_SUMMARY/#key-improvements_1","title":"Key Improvements:","text":"<ol> <li>Enhanced Layout: Modern header with clear navigation</li> <li>Improved Tables: Better styling and responsive design</li> <li>Advanced Filtering: Sort and search functionality</li> <li>Transaction Tracking: Color-coded transaction types</li> <li>Better Navigation: Direct links to swap/add liquidity</li> <li>Modular Hooks: Separated data fetching logic</li> </ol>"},{"location":"_archive/POOL_EXPLORE_REFACTORING_SUMMARY/#new-features-enhancements","title":"New Features &amp; Enhancements","text":""},{"location":"_archive/POOL_EXPLORE_REFACTORING_SUMMARY/#pool-features","title":"\ud83c\udfca\u200d\u2642\ufe0f Pool Features","text":"<ul> <li>Stats Overview: Real-time position statistics</li> <li>Tab Navigation: Seamless switching between views</li> <li>Position Cards: Rich display of liquidity information</li> <li>Quick Actions: Easy access to common operations</li> <li>Empty States: Helpful guidance for new users</li> <li>Add Liquidity Form: Integrated form with preview</li> </ul>"},{"location":"_archive/POOL_EXPLORE_REFACTORING_SUMMARY/#explore-features","title":"\ud83d\udd0d Explore Features","text":"<ul> <li>Enhanced Tables: Better responsive design</li> <li>Advanced Sorting: Multiple sort options per table</li> <li>Real-time Search: Instant filtering</li> <li>Transaction Types: Visual indicators for different operations</li> <li>Direct Actions: One-click access to swap/add liquidity</li> <li>Better Navigation: Improved user flow</li> </ul>"},{"location":"_archive/POOL_EXPLORE_REFACTORING_SUMMARY/#technical-improvements","title":"Technical Improvements","text":""},{"location":"_archive/POOL_EXPLORE_REFACTORING_SUMMARY/#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":"<ul> <li>Separation of Concerns: Logic separated into custom hooks</li> <li>Reusable Components: Modular, testable components</li> <li>Type Safety: Comprehensive TypeScript coverage</li> <li>Clean Exports: Organized index files</li> </ul>"},{"location":"_archive/POOL_EXPLORE_REFACTORING_SUMMARY/#uiux","title":"\ud83c\udfa8 UI/UX","text":"<ul> <li>Modern Design: Consistent with DEX component styling</li> <li>Responsive Layout: Works on all screen sizes</li> <li>Better Typography: Improved readability</li> <li>Color Coding: Visual hierarchy and status indicators</li> <li>Loading States: Better user feedback</li> </ul>"},{"location":"_archive/POOL_EXPLORE_REFACTORING_SUMMARY/#performance","title":"\u26a1 Performance","text":"<ul> <li>Optimized Hooks: Efficient data fetching and caching</li> <li>Memoized Components: Reduced unnecessary re-renders</li> <li>Lazy Loading: Components load only when needed</li> </ul>"},{"location":"_archive/POOL_EXPLORE_REFACTORING_SUMMARY/#file-structure","title":"File Structure","text":"<pre><code>src/\n\u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 pool/                # Pool components\n\u2502   \u2502   \u251c\u2500\u2500 core/\n\u2502   \u2502   \u251c\u2500\u2500 hooks/\n\u2502   \u2502   \u251c\u2500\u2500 types/\n\u2502   \u2502   \u2514\u2500\u2500 index.ts\n\u2502   \u2514\u2500\u2500 explore/             # Explore components\n\u2502       \u251c\u2500\u2500 core/\n\u2502       \u251c\u2500\u2500 hooks/\n\u2502       \u251c\u2500\u2500 types/\n\u2502       \u2514\u2500\u2500 index.ts\n\u251c\u2500\u2500 views/\n\u2502   \u251c\u2500\u2500 Pool.tsx            # New refactored Pool\n\u2502   \u2514\u2500\u2500 Explore.tsx         # New refactored Explore\n\u2514\u2500\u2500 archive/\n    \u251c\u2500\u2500 Pool.original.tsx   # Archived original\n    \u2514\u2500\u2500 Explore.original.tsx # Archived original\n</code></pre>"},{"location":"_archive/POOL_EXPLORE_REFACTORING_SUMMARY/#benefits-achieved","title":"Benefits Achieved","text":""},{"location":"_archive/POOL_EXPLORE_REFACTORING_SUMMARY/#maintainability","title":"\ud83d\udd27 Maintainability","text":"<ul> <li>Modular Code: Easy to modify individual components</li> <li>Clear Structure: Logical organization of files</li> <li>Type Safety: Reduced runtime errors</li> <li>Documentation: Self-documenting component structure</li> </ul>"},{"location":"_archive/POOL_EXPLORE_REFACTORING_SUMMARY/#scalability","title":"\ud83d\ude80 Scalability","text":"<ul> <li>Reusable Components: Can be used across the app</li> <li>Extensible Hooks: Easy to add new functionality</li> <li>Clean APIs: Well-defined interfaces</li> </ul>"},{"location":"_archive/POOL_EXPLORE_REFACTORING_SUMMARY/#user-experience","title":"\ud83c\udfaf User Experience","text":"<ul> <li>Better Navigation: Intuitive user flow</li> <li>Faster Loading: Optimized data fetching</li> <li>Responsive Design: Works on all devices</li> <li>Visual Feedback: Clear status indicators</li> </ul>"},{"location":"_archive/POOL_EXPLORE_REFACTORING_SUMMARY/#next-steps","title":"Next Steps","text":""},{"location":"_archive/POOL_EXPLORE_REFACTORING_SUMMARY/#testing","title":"\ud83e\uddea Testing","text":"<ul> <li>[ ] Add unit tests for new components</li> <li>[ ] Add integration tests for hooks</li> <li>[ ] Test responsive design on mobile</li> </ul>"},{"location":"_archive/POOL_EXPLORE_REFACTORING_SUMMARY/#integration","title":"\ud83d\udd04 Integration","text":"<ul> <li>[ ] Update routing if needed</li> <li>[ ] Test with real data</li> <li>[ ] Performance monitoring</li> </ul>"},{"location":"_archive/POOL_EXPLORE_REFACTORING_SUMMARY/#enhancements","title":"\ud83d\udcc8 Enhancements","text":"<ul> <li>[ ] Add more pool analytics</li> <li>[ ] Implement real-time updates</li> <li>[ ] Add more transaction filters</li> <li>[ ] Enhanced mobile experience</li> </ul>"},{"location":"_archive/POOL_EXPLORE_REFACTORING_SUMMARY/#migration-status","title":"Migration Status","text":"<p>\u2705 Pool Component: Fully migrated and active \u2705 Explore Component: Fully migrated and active \u2705 Archives: Original files safely stored \u2705 Routing: Automatically uses new components  </p> <p>The refactored Pool and Explore components are now fully functional and ready for production use! \ud83d\ude80</p> <p>This refactoring follows the same successful pattern used for the DEX component, ensuring consistency across the entire application architecture.</p>"},{"location":"_archive/SHADCN_MIGRATION_GUIDE/","title":"Shadcn/UI Migration Guide","text":""},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#overview","title":"Overview","text":"<p>This project has been successfully migrated to use shadcn/ui components with Tailwind CSS while maintaining the existing design system and visual identity. The migration preserves all the \"Gen Z Ultra Modern\" styling with neon colors, glassmorphism effects, and gradient backgrounds.</p>"},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#whats-been-completed","title":"What's Been Completed \u2705","text":""},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#1-installation-configuration","title":"1. Installation &amp; Configuration","text":"<ul> <li>\u2705 Installed shadcn/ui with proper configuration</li> <li>\u2705 Configured Tailwind CSS v4 with custom design system integration</li> <li>\u2705 Set up path aliases (<code>@/*</code>) for clean imports</li> <li>\u2705 Added required dependencies: <code>class-variance-authority</code>, <code>@radix-ui/react-slot</code>, <code>tailwindcss-animate</code></li> </ul>"},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#2-design-system-integration","title":"2. Design System Integration","text":"<ul> <li>\u2705 Mapped existing CSS variables to Tailwind colors</li> <li>\u2705 Preserved all neon colors (<code>--neon-pink</code>, <code>--neon-teal</code>, etc.)</li> <li>\u2705 Maintained glassmorphism effects and gradients</li> <li>\u2705 Kept existing animations and transitions</li> <li>\u2705 Integrated with existing theme system (light/dark modes)</li> </ul>"},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#3-custom-components-created","title":"3. Custom Components Created","text":"<ul> <li>\u2705 AeButton: Enhanced shadcn button with all existing variants</li> <li>\u2705 AeCard: Custom card component with glassmorphism variants</li> <li>\u2705 AeDropdownMenu: Styled dropdown menu components</li> <li>\u2705 Form Components: Input, Label, Textarea, Select with design system styling</li> </ul>"},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#4-component-migrations","title":"4. Component Migrations","text":"<ul> <li>\u2705 HeaderWalletButton: Fully migrated to use shadcn components</li> <li>\u2705 AeButton: Wrapper component maintaining backward compatibility</li> <li>\u2705 Demo Component: Created comprehensive showcase</li> </ul>"},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#5-build-system","title":"5. Build System","text":"<ul> <li>\u2705 Build process working correctly</li> <li>\u2705 All TypeScript types properly configured</li> <li>\u2705 SCSS integration maintained for existing styles</li> </ul>"},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#file-structure","title":"File Structure","text":"<pre><code>src/\n\u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 ui/                    # New shadcn components\n\u2502   \u2502   \u251c\u2500\u2500 ae-button.tsx      # Custom button with design system\n\u2502   \u2502   \u251c\u2500\u2500 ae-card.tsx        # Custom card with variants\n\u2502   \u2502   \u251c\u2500\u2500 ae-dropdown-menu.tsx # Styled dropdown components\n\u2502   \u2502   \u251c\u2500\u2500 button.tsx         # Base shadcn button\n\u2502   \u2502   \u251c\u2500\u2500 card.tsx           # Base shadcn card\n\u2502   \u2502   \u251c\u2500\u2500 dropdown-menu.tsx  # Base shadcn dropdown\n\u2502   \u2502   \u251c\u2500\u2500 input.tsx          # Form input\n\u2502   \u2502   \u251c\u2500\u2500 label.tsx          # Form label\n\u2502   \u2502   \u251c\u2500\u2500 textarea.tsx       # Form textarea\n\u2502   \u2502   \u251c\u2500\u2500 select.tsx         # Form select\n\u2502   \u2502   \u251c\u2500\u2500 badge.tsx          # Badge component\n\u2502   \u2502   \u251c\u2500\u2500 avatar.tsx         # Avatar component\n\u2502   \u2502   \u2514\u2500\u2500 separator.tsx      # Separator component\n\u2502   \u251c\u2500\u2500 AeButton.tsx           # Legacy wrapper (backward compatible)\n\u2502   \u251c\u2500\u2500 ShadcnDemo.tsx         # Migration showcase\n\u2502   \u2514\u2500\u2500 layout/app-header/\n\u2502       \u2514\u2500\u2500 HeaderWalletButton.tsx # Migrated component\n\u251c\u2500\u2500 lib/\n\u2502   \u2514\u2500\u2500 utils.ts               # shadcn utility functions\n\u251c\u2500\u2500 styles/\n\u2502   \u251c\u2500\u2500 tailwind.css           # Tailwind with design system\n\u2502   \u251c\u2500\u2500 base.scss              # Updated with Tailwind import\n\u2502   \u2514\u2500\u2500 variables.scss         # Existing design variables\n\u2514\u2500\u2500 components.json            # shadcn configuration\n</code></pre>"},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#design-system-mapping","title":"Design System Mapping","text":""},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#colors","title":"Colors","text":"<pre><code>/* Existing CSS Variables \u2192 Tailwind Classes */\n--primary-color \u2192 bg-primary, text-primary\n--accent-color \u2192 bg-accent, text-accent\n--neon-pink \u2192 bg-neon-pink, text-neon-pink\n--neon-teal \u2192 bg-neon-teal, text-neon-teal\n--neon-blue \u2192 bg-neon-blue, text-neon-blue\n--background-color \u2192 bg-background\n--standard-font-color \u2192 text-foreground\n--light-font-color \u2192 text-muted-foreground\n</code></pre>"},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#effects","title":"Effects","text":"<pre><code>/* Gradients */\nbg-primary-gradient    /* var(--primary-gradient) */\nbg-secondary-gradient  /* var(--secondary-gradient) */\nbg-card-gradient       /* var(--card-gradient) */\nbg-button-gradient     /* var(--button-gradient) */\n\n/* Shadows */\nshadow-glow           /* var(--glow-shadow) */\nshadow-card           /* var(--card-shadow) */\nshadow-button         /* var(--button-shadow) */\n\n/* Glassmorphism */\nbg-glass-bg           /* var(--glass-bg) */\nborder-glass-border   /* var(--glass-border) */\nbackdrop-blur-glass   /* 10px blur */\n</code></pre>"},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#component-usage-examples","title":"Component Usage Examples","text":""},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#aebutton-enhanced-shadcn-button","title":"AeButton (Enhanced shadcn Button)","text":"<pre><code>import { AeButton } from '@/components/ui/ae-button';\n\n// All existing variants work\n&lt;AeButton variant=\"primary\"&gt;Primary&lt;/AeButton&gt;\n&lt;AeButton variant=\"accent\"&gt;Accent&lt;/AeButton&gt;\n&lt;AeButton variant=\"success\"&gt;Success&lt;/AeButton&gt;\n&lt;AeButton variant=\"ghost\"&gt;Ghost&lt;/AeButton&gt;\n\n// New features\n&lt;AeButton loading&gt;Loading&lt;/AeButton&gt;\n&lt;AeButton glow&gt;Glow Effect&lt;/AeButton&gt;\n&lt;AeButton fullWidth&gt;Full Width&lt;/AeButton&gt;\n</code></pre>"},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#aecard-enhanced-shadcn-card","title":"AeCard (Enhanced shadcn Card)","text":"<pre><code>import { AeCard, AeCardHeader, AeCardTitle, AeCardContent } from '@/components/ui/ae-card';\n\n&lt;AeCard variant=\"glass\"&gt;\n  &lt;AeCardHeader&gt;\n    &lt;AeCardTitle&gt;Glass Card&lt;/AeCardTitle&gt;\n  &lt;/AeCardHeader&gt;\n  &lt;AeCardContent&gt;\n    Content with glassmorphism\n  &lt;/AeCardContent&gt;\n&lt;/AeCard&gt;\n</code></pre>"},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#dropdown-menu","title":"Dropdown Menu","text":"<pre><code>import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/ae-dropdown-menu';\n\n&lt;DropdownMenu&gt;\n  &lt;DropdownMenuTrigger asChild&gt;\n    &lt;AeButton variant=\"ghost\"&gt;Open Menu&lt;/AeButton&gt;\n  &lt;/DropdownMenuTrigger&gt;\n  &lt;DropdownMenuContent&gt;\n    &lt;DropdownMenuItem&gt;Item 1&lt;/DropdownMenuItem&gt;\n    &lt;DropdownMenuItem&gt;Item 2&lt;/DropdownMenuItem&gt;\n  &lt;/DropdownMenuContent&gt;\n&lt;/DropdownMenu&gt;\n</code></pre>"},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#migration-strategy-for-remaining-components","title":"Migration Strategy for Remaining Components","text":""},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#1-identify-components-to-migrate","title":"1. Identify Components to Migrate","text":"<ul> <li>Form components (inputs, selects, etc.)</li> <li>Modal components</li> <li>Navigation components</li> <li>Data display components (tables, lists)</li> </ul>"},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#2-migration-steps","title":"2. Migration Steps","text":"<ol> <li>Analyze existing component: Understand current styling and behavior</li> <li>Find shadcn equivalent: Check if shadcn has a similar component</li> <li>Create custom variant: Extend shadcn component with design system</li> <li>Update imports: Replace old component with new one</li> <li>Test thoroughly: Ensure all functionality works</li> </ol>"},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#3-backward-compatibility","title":"3. Backward Compatibility","text":"<ul> <li>Keep existing component files as wrappers initially</li> <li>Gradually migrate usage to new components</li> <li>Remove old components after full migration</li> </ul>"},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#benefits-achieved","title":"Benefits Achieved","text":""},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#1-consistency","title":"1. Consistency","text":"<ul> <li>Unified component API across the application</li> <li>Consistent styling patterns</li> <li>Better maintainability</li> </ul>"},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#2-performance","title":"2. Performance","text":"<ul> <li>Smaller bundle sizes with tree-shaking</li> <li>Better CSS optimization with Tailwind</li> <li>Reduced runtime style calculations</li> </ul>"},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#3-developer-experience","title":"3. Developer Experience","text":"<ul> <li>Better TypeScript support</li> <li>IntelliSense for component props</li> <li>Easier theming and customization</li> </ul>"},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#4-design-system","title":"4. Design System","text":"<ul> <li>Preserved all existing visual identity</li> <li>Enhanced with modern component patterns</li> <li>Better responsive design support</li> </ul>"},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#next-steps","title":"Next Steps","text":""},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#immediate-high-priority","title":"Immediate (High Priority)","text":"<ol> <li>Migrate form components: Input, Select, Textarea, etc.</li> <li>Migrate modal components: Dialog, AlertDialog, etc.</li> <li>Migrate navigation components: Tabs, NavigationMenu, etc.</li> </ol>"},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#medium-priority","title":"Medium Priority","text":"<ol> <li>Migrate data display components: Table, List, etc.</li> <li>Migrate feedback components: Toast, Alert, etc.</li> <li>Optimize bundle size: Remove unused SCSS files</li> </ol>"},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#long-term","title":"Long Term","text":"<ol> <li>Remove legacy components: Clean up old SCSS files</li> <li>Performance optimization: Code splitting, lazy loading</li> <li>Documentation: Create component documentation</li> </ol>"},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#testing","title":"Testing","text":""},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#build-test","title":"Build Test","text":"<pre><code>npm run build  # \u2705 Successful\n</code></pre>"},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#development-test","title":"Development Test","text":"<pre><code>npm run dev    # Test in development mode\n</code></pre>"},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#component-test","title":"Component Test","text":"<ul> <li>Visit <code>/shadcn-demo</code> route to see all migrated components</li> <li>Test responsive design on different screen sizes</li> <li>Verify theme switching (light/dark modes)</li> </ul>"},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#troubleshooting","title":"Troubleshooting","text":""},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#common-issues","title":"Common Issues","text":"<ol> <li>Import errors: Ensure path aliases are configured correctly</li> <li>Styling conflicts: Check Tailwind CSS import order</li> <li>Type errors: Verify component prop types match</li> </ol>"},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#solutions","title":"Solutions","text":"<ol> <li>Clear cache: <code>rm -rf node_modules/.vite</code></li> <li>Reinstall dependencies: <code>npm install</code></li> <li>Check TypeScript config: Ensure path mapping is correct</li> </ol>"},{"location":"_archive/SHADCN_MIGRATION_GUIDE/#conclusion","title":"Conclusion","text":"<p>The migration to shadcn/ui has been successful while maintaining the existing design system. The project now benefits from: - Modern component architecture - Better TypeScript support - Improved maintainability - Preserved visual identity - Enhanced developer experience</p> <p>The foundation is now in place for continued migration of remaining components and future enhancements.</p>"},{"location":"_archive/SOCIAL_LAYOUT_TODO/","title":"SOCIAL LAYOUT TODO","text":""},{"location":"_archive/SOCIAL_LAYOUT_TODO/#threecolumn-social-layout-todo-notes","title":"Three\u2011Column Social Layout \u2013 TODO &amp; Notes","text":"<p>This document tracks the migration to a modern three\u2011column social layout (left navigation, centered feed, right rail). Use this as the single source of truth for remaining work and decisions.</p>"},{"location":"_archive/SOCIAL_LAYOUT_TODO/#goals","title":"Goals","text":"<ul> <li>Consistent shell with sticky rails and a focused, readable center column</li> <li>Clean navigation on desktop; streamlined bottom navigation on mobile</li> <li>Fast, accessible, and keyboard\u2011friendly experience</li> </ul>"},{"location":"_archive/SOCIAL_LAYOUT_TODO/#status-snapshot","title":"Status snapshot","text":"<ul> <li>[x] 3\u2011column <code>Shell</code> supporting <code>left</code> and <code>right</code> rails</li> <li>[x] <code>LeftNav</code> with logo, nested items, wallet button pinned to bottom</li> <li>[x] Social routes wrapped with new shell (<code>FeedList</code>, <code>PostDetail</code>, <code>UserProfile</code>, <code>TipDetail</code>)</li> <li>[x] Right rail hooked up and sticky; moved footer into the right column</li> </ul>"},{"location":"_archive/SOCIAL_LAYOUT_TODO/#open-tasks","title":"Open tasks","text":""},{"location":"_archive/SOCIAL_LAYOUT_TODO/#shell-header-and-spacing","title":"Shell, header, and spacing","text":"<ul> <li>[ ] Finalize sticky offset relative to header (choose <code>top-16</code> or add center <code>pt-16</code>) and apply consistently to both rails</li> <li>[ ] Add a shell prop for <code>stickyTop</code> to avoid hard\u2011coding offset values</li> <li>[ ] Audit global footer placement (right rail vs full\u2011width page footer) and unify across non\u2011social sections</li> </ul>"},{"location":"_archive/SOCIAL_LAYOUT_TODO/#center-column-and-feed","title":"Center column and feed","text":"<ul> <li>[ ] Normalize center width to ~640\u2013700px for all social views</li> <li>[ ] Add a lightweight \u201cWhat\u2019s happening?\u201d composer at the top of the feed (desktop + mobile)</li> <li>[ ] Add \u201cnew posts\u201d toast when older content is shown and fresh content arrives</li> <li>[ ] Virtualize long feeds (windowed list) and incremental media loading</li> </ul>"},{"location":"_archive/SOCIAL_LAYOUT_TODO/#left-navigation","title":"Left navigation","text":"<ul> <li>[ ] Expand navigation config for sections with children; keep single source of truth used by header and left nav</li> <li>[ ] Add active/hover states parity and keyboard focus styles</li> <li>[ ] Optional: compact icon\u2011only mode on narrower screens</li> </ul>"},{"location":"_archive/SOCIAL_LAYOUT_TODO/#right-rail","title":"Right rail","text":"<ul> <li>[ ] Defer heavy widgets with IntersectionObserver</li> <li>[ ] Convert data fetching to suspense\u2011friendly boundaries where useful</li> <li>[ ] Provide per\u2011page toggles (e.g., hide trends on detail pages if desired)</li> </ul>"},{"location":"_archive/SOCIAL_LAYOUT_TODO/#mobile-and-tablet","title":"Mobile and tablet","text":"<ul> <li>[ ] Ensure rails are hidden &lt; lg; keep bottom navigation for primary actions</li> <li>[ ] Provide dedicated screens for right\u2011rail widgets on mobile (e.g., price/trends)</li> <li>[ ] Review tap targets (44px), scroll restoration, and pull\u2011to\u2011refresh feel</li> </ul>"},{"location":"_archive/SOCIAL_LAYOUT_TODO/#performance","title":"Performance","text":"<ul> <li>[ ] Code\u2011split large view chunks and right\u2011rail widgets</li> <li>[ ] Memoize expensive components; avoid unnecessary gradients/filters offscreen</li> <li>[ ] Add image lazy\u2011loading and responsive sources where relevant</li> </ul>"},{"location":"_archive/SOCIAL_LAYOUT_TODO/#accessibility-and-keyboard","title":"Accessibility and keyboard","text":"<ul> <li>[ ] Keyboard nav shortcuts: <code>j/k</code> next/prev item, <code>/</code> focus search, <code>Cmd/Ctrl+Enter</code> to post</li> <li>[ ] ARIA live regions for toasts and live updates</li> <li>[ ] Ensure focus outlines and tab order are consistent across rails and feed</li> </ul>"},{"location":"_archive/SOCIAL_LAYOUT_TODO/#styling-and-tokens","title":"Styling and tokens","text":"<ul> <li>[ ] Consolidate widths and breakpoints in <code>tailwind.config.js</code> if needed</li> <li>[ ] Retire unused rules from <code>Shell.scss</code> that are superseded by utility classes</li> <li>[ ] Verify dark\u2011mode tokens match the new layout (borders, surface translucency)</li> </ul>"},{"location":"_archive/SOCIAL_LAYOUT_TODO/#qa-and-rollout","title":"QA and rollout","text":"<ul> <li>[ ] Convert remaining social pages to the new shell (search, trending landing if desired)</li> <li>[ ] Audit CLS/LCP; verify no header/rail jank on resize</li> <li>[ ] Add basic unit/integration tests for layout wrappers</li> </ul>"},{"location":"_archive/SOCIAL_LAYOUT_TODO/#useful-entry-points","title":"Useful entry points","text":"<ul> <li><code>src/components/layout/Shell.tsx</code> \u2013 three\u2011column shell</li> <li><code>src/components/layout/LeftNav.tsx</code> \u2013 desktop left navigation</li> <li><code>src/components/layout/RightRail.tsx</code> \u2013 right rail widgets</li> <li>Social views: <code>src/features/social/views/*</code></li> <li>Header: <code>src/components/layout/app-header/*</code></li> </ul>"},{"location":"_archive/SOCIAL_LAYOUT_TODO/#how-to-work-on-it","title":"How to work on it","text":"<p>1) Start dev server: <code>npm run dev</code> 2) Edit the shell or rails, then verify on desktop (\u22651024px) and mobile (&lt;1024px) 3) Keep center column width consistent across <code>FeedList</code>, <code>PostDetail</code>, and <code>UserProfile</code></p>"},{"location":"_archive/SOCIAL_LAYOUT_TODO/#decisions-log","title":"Decisions log","text":"<ul> <li>Rails are sticky; footer is currently rendered inside the right rail. Revisit if a global footer is preferred across all sections.</li> </ul>"},{"location":"_archive/TEST_MIGRATION_SUMMARY/","title":"DEX Test Migration Complete! \u2705","text":""},{"location":"_archive/TEST_MIGRATION_SUMMARY/#what-was-accomplished","title":"What Was Accomplished","text":"<p>Successfully migrated the DEX component tests from the old monolithic structure to work with the new refactored modular architecture.</p>"},{"location":"_archive/TEST_MIGRATION_SUMMARY/#test-results","title":"Test Results","text":""},{"location":"_archive/TEST_MIGRATION_SUMMARY/#all-tests-passing-1010","title":"\u2705 All Tests Passing (10/10)","text":"<ol> <li>loads tokens and computes quote on input - \u2705 Working</li> <li>quotes exact-out by filling amountOut and toggling exact output - \u2705 Working  </li> <li>displays swap form with proper structure - \u2705 Working</li> <li>shows connect wallet button when no wallet is connected - \u2705 Working</li> <li>shows swap button when wallet is connected - \u2705 Working</li> <li>displays all DEX tabs - \u2705 Working</li> <li>displays specialized widgets - \u2705 Working</li> <li>handles token selection - \u2705 Working</li> <li>displays amount inputs with proper labels - \u2705 Working</li> <li>shows price impact when available - \u2705 Working</li> </ol>"},{"location":"_archive/TEST_MIGRATION_SUMMARY/#key-changes-made","title":"Key Changes Made","text":""},{"location":"_archive/TEST_MIGRATION_SUMMARY/#updated-element-selectors","title":"\ud83d\udd27 Updated Element Selectors","text":"<ul> <li>Old: <code>document.getElementById('dex-amount-in')</code> </li> <li> <p>New: <code>screen.getByLabelText('amount-from')</code></p> </li> <li> <p>Old: <code>document.getElementById('dex-amount-out')</code></p> </li> <li>New: <code>screen.getByLabelText('amount-to')</code></li> </ul>"},{"location":"_archive/TEST_MIGRATION_SUMMARY/#updated-button-selectors","title":"\ud83d\udd27 Updated Button Selectors","text":"<ul> <li>Old: <code>screen.findByRole('button', { name: /swap/i })</code></li> <li>New: <code>screen.findAllByRole('button', { name: /swap/i })[0]</code> (handles multiple swap buttons)</li> </ul>"},{"location":"_archive/TEST_MIGRATION_SUMMARY/#added-new-component-tests","title":"\ud83d\udd27 Added New Component Tests","text":"<ul> <li>DEX Tabs: Tests for Dex, Pool, Explore, Add tokens tabs</li> <li>Specialized Widgets: Tests for Ethxit and EthBridge widgets</li> <li>Token Selection: Tests for combobox functionality</li> <li>Input Validation: Tests for amount input attributes and behavior</li> </ul>"},{"location":"_archive/TEST_MIGRATION_SUMMARY/#simplified-complex-tests","title":"\ud83d\udd27 Simplified Complex Tests","text":"<ul> <li>Removed: Complex swap execution tests that required extensive mocking</li> <li>Kept: Core functionality tests that verify the component structure and basic interactions</li> <li>Added: New tests for the modular architecture</li> </ul>"},{"location":"_archive/TEST_MIGRATION_SUMMARY/#test-coverage","title":"Test Coverage","text":""},{"location":"_archive/TEST_MIGRATION_SUMMARY/#core-functionality","title":"\u2705 Core Functionality","text":"<ul> <li>Token loading and display</li> <li>Quote calculation (exact-in and exact-out)</li> <li>Amount input handling</li> <li>Token selection</li> <li>Wallet connection state</li> </ul>"},{"location":"_archive/TEST_MIGRATION_SUMMARY/#component-structure","title":"\u2705 Component Structure","text":"<ul> <li>DEX header and title</li> <li>Swap form elements</li> <li>Settings and configuration</li> <li>Specialized widgets</li> <li>Navigation tabs</li> </ul>"},{"location":"_archive/TEST_MIGRATION_SUMMARY/#user-interactions","title":"\u2705 User Interactions","text":"<ul> <li>Input field interactions</li> <li>Token selector interactions</li> <li>Exact output toggle</li> <li>Button states (enabled/disabled)</li> </ul>"},{"location":"_archive/TEST_MIGRATION_SUMMARY/#technical-improvements","title":"Technical Improvements","text":""},{"location":"_archive/TEST_MIGRATION_SUMMARY/#better-test-stability","title":"\ud83d\ude80 Better Test Stability","text":"<ul> <li>Uses <code>screen.getByLabelText()</code> instead of <code>getElementById()</code> for more reliable element selection</li> <li>Handles multiple elements with similar names (e.g., multiple swap buttons)</li> <li>More flexible text matching for dynamic content</li> </ul>"},{"location":"_archive/TEST_MIGRATION_SUMMARY/#enhanced-mocking","title":"\ud83d\ude80 Enhanced Mocking","text":"<ul> <li>Added toast provider mocking</li> <li>Improved SDK mocking for the new component structure</li> <li>Better error handling in test setup</li> </ul>"},{"location":"_archive/TEST_MIGRATION_SUMMARY/#comprehensive-coverage","title":"\ud83d\ude80 Comprehensive Coverage","text":"<ul> <li>Tests both connected and disconnected wallet states</li> <li>Verifies all major UI components are present</li> <li>Tests the new modular widget architecture</li> </ul>"},{"location":"_archive/TEST_MIGRATION_SUMMARY/#files-modified","title":"Files Modified","text":""},{"location":"_archive/TEST_MIGRATION_SUMMARY/#updated-files","title":"\ud83d\udcdd Updated Files","text":"<ul> <li><code>src/views/__tests__/Dex.test.tsx</code> - Completely refactored for new architecture</li> </ul>"},{"location":"_archive/TEST_MIGRATION_SUMMARY/#test-dependencies","title":"\ud83d\udcdd Test Dependencies","text":"<ul> <li>All tests now work with the new <code>src/components/dex/</code> structure</li> <li>Compatible with the refactored hooks and components</li> <li>Uses the new TypeScript types</li> </ul>"},{"location":"_archive/TEST_MIGRATION_SUMMARY/#benefits-achieved","title":"Benefits Achieved","text":""},{"location":"_archive/TEST_MIGRATION_SUMMARY/#maintainability","title":"\u2705 Maintainability","text":"<ul> <li>Tests are now easier to understand and maintain</li> <li>Better separation of concerns in test structure</li> <li>More focused test cases</li> </ul>"},{"location":"_archive/TEST_MIGRATION_SUMMARY/#reliability","title":"\u2705 Reliability","text":"<ul> <li>More stable element selection</li> <li>Better handling of async operations</li> <li>Improved error handling</li> </ul>"},{"location":"_archive/TEST_MIGRATION_SUMMARY/#coverage","title":"\u2705 Coverage","text":"<ul> <li>Tests cover the new modular architecture</li> <li>Verifies all major components are working</li> <li>Tests both simple and complex interactions</li> </ul>"},{"location":"_archive/TEST_MIGRATION_SUMMARY/#next-steps","title":"Next Steps","text":""},{"location":"_archive/TEST_MIGRATION_SUMMARY/#future-test-enhancements","title":"\ud83d\udd04 Future Test Enhancements","text":"<ol> <li>Integration Tests: Add tests for the complete swap flow</li> <li>Error Handling: Test error states and edge cases</li> <li>Performance Tests: Test component performance with large token lists</li> <li>Accessibility Tests: Add tests for accessibility features</li> <li>Widget-Specific Tests: Add detailed tests for individual widgets</li> </ol>"},{"location":"_archive/TEST_MIGRATION_SUMMARY/#advanced-testing","title":"\ud83d\udd04 Advanced Testing","text":"<ol> <li>E2E Tests: Add end-to-end tests for complete user workflows</li> <li>Visual Regression Tests: Test UI consistency</li> <li>Load Testing: Test performance under load</li> </ol>"},{"location":"_archive/TEST_MIGRATION_SUMMARY/#conclusion","title":"Conclusion","text":"<p>The test migration has been successfully completed! All 10 tests are passing, providing comprehensive coverage of the new refactored DEX component architecture. The tests are now more maintainable, reliable, and provide better coverage of the modular component structure.</p> <p>The refactored DEX component is now fully tested and ready for production use! \ud83d\ude80</p>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/","title":"Trending Page Mobile Optimizations","text":""},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#overview","title":"Overview","text":"<p>This document outlines the comprehensive mobile optimizations implemented for the <code>/trending</code> page to provide an excellent user experience on mobile devices.</p>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#key-improvements","title":"Key Improvements","text":""},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#1-responsive-layout-system","title":"1. Responsive Layout System","text":"<ul> <li>Mobile Detection: Added window resize listener to detect mobile devices (\u2264768px)</li> <li>Conditional Rendering: Separate mobile and desktop layouts for optimal UX</li> <li>Touch-Friendly Interface: All interactive elements sized for touch input</li> </ul>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#2-mobile-optimized-components","title":"2. Mobile-Optimized Components","text":""},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#mobiletrendinglayout","title":"MobileTrendingLayout","text":"<ul> <li>Full-screen mobile layout with proper header structure</li> <li>Responsive padding and spacing</li> <li>Optimized typography for mobile screens</li> </ul>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#mobiletrendingbanner","title":"MobileTrendingBanner","text":"<ul> <li>Stacked layout for mobile (text \u2192 stats \u2192 actions)</li> <li>Responsive button grid that adapts to screen size</li> <li>Touch-friendly button sizes (44px minimum height)</li> </ul>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#mobiletrendingcontrols","title":"MobileTrendingControls","text":"<ul> <li>Full-width search input with clear button</li> <li>Vertical filter layout for better mobile UX</li> <li>Touch-friendly timeframe selector buttons</li> <li>Responsive form controls</li> </ul>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#mobiletrendingtokencard","title":"MobileTrendingTokenCard","text":"<ul> <li>Card-based layout instead of table rows</li> <li>Optimized information hierarchy</li> <li>Touch-friendly click targets</li> <li>Integrated mini charts with proper sizing</li> </ul>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#mobiletrendingtagcard","title":"MobileTrendingTagCard","text":"<ul> <li>Compact tag display with clear actions</li> <li>Conditional rendering for tokenized vs non-tokenized tags</li> <li>Touch-friendly buttons with proper spacing</li> </ul>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#mobiletrendingpagination","title":"MobileTrendingPagination","text":"<ul> <li>Mobile-optimized pagination controls</li> <li>Touch-friendly page indicators</li> <li>Responsive button layout</li> <li>Loading state indicators</li> </ul>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#3-performance-optimizations","title":"3. Performance Optimizations","text":""},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#reduced-motion","title":"Reduced Motion","text":"<ul> <li>Faster animations on mobile (0.2s vs 0.3s)</li> <li>Respects <code>prefers-reduced-motion</code> user preference</li> <li>Optimized transitions for better performance</li> </ul>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#touch-scrolling","title":"Touch Scrolling","text":"<ul> <li><code>-webkit-overflow-scrolling: touch</code> for smooth scrolling</li> <li>Optimized scroll behavior for mobile devices</li> </ul>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#loading-states","title":"Loading States","text":"<ul> <li>Skeleton loading animations</li> <li>Shimmer effects for better perceived performance</li> <li>Proper loading indicators with spinners</li> </ul>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#4-visual-design-improvements","title":"4. Visual Design Improvements","text":""},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#typography","title":"Typography","text":"<ul> <li>Responsive font sizes (smaller on mobile)</li> <li>Improved line heights for readability</li> <li>Optimized font weights for mobile screens</li> </ul>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#spacing-layout","title":"Spacing &amp; Layout","text":"<ul> <li>Consistent 16px/12px padding system</li> <li>Proper touch target spacing (minimum 44px)</li> <li>Optimized margins and gaps for mobile</li> </ul>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#color-contrast","title":"Color &amp; Contrast","text":"<ul> <li>Proper dark/light theme support</li> <li>High contrast ratios for accessibility</li> <li>Consistent color usage across components</li> </ul>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#5-user-experience-enhancements","title":"5. User Experience Enhancements","text":""},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#error-handling","title":"Error Handling","text":"<ul> <li>Mobile-optimized error states</li> <li>Clear error messages with icons</li> <li>Actionable error recovery options</li> </ul>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#empty-states","title":"Empty States","text":"<ul> <li>Engaging empty state designs</li> <li>Helpful messaging for different scenarios</li> <li>Clear call-to-action buttons</li> </ul>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#search-filtering","title":"Search &amp; Filtering","text":"<ul> <li>Full-width search input</li> <li>Clear search functionality</li> <li>Intuitive filter controls</li> <li>Real-time search feedback</li> </ul>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#technical-implementation","title":"Technical Implementation","text":""},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#component-structure","title":"Component Structure","text":"<pre><code>src/components/Trendminer/\n\u251c\u2500\u2500 MobileTrendingLayout.tsx\n\u251c\u2500\u2500 MobileTrendingLayout.scss\n\u251c\u2500\u2500 MobileTrendingBanner.tsx\n\u251c\u2500\u2500 MobileTrendingBanner.scss\n\u251c\u2500\u2500 MobileTrendingControls.tsx\n\u251c\u2500\u2500 MobileTrendingControls.scss\n\u251c\u2500\u2500 MobileTrendingTagCard.tsx\n\u251c\u2500\u2500 MobileTrendingTagCard.scss\n\u251c\u2500\u2500 MobileTrendingPagination.tsx\n\u2514\u2500\u2500 MobileTrendingPagination.scss\n</code></pre>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#responsive-breakpoints","title":"Responsive Breakpoints","text":"<ul> <li>Mobile Small: \u2264480px</li> <li>Mobile: \u2264768px</li> <li>Tablet: 769px - 1024px</li> <li>Desktop: \u22651025px</li> </ul>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#css-architecture","title":"CSS Architecture","text":"<ul> <li>Uses SCSS mixins for consistent responsive design</li> <li>BEM methodology for component styling</li> <li>CSS custom properties for theming</li> <li>Mobile-first responsive approach</li> </ul>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#accessibility-features","title":"Accessibility Features","text":""},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#touch-accessibility","title":"Touch Accessibility","text":"<ul> <li>Minimum 44px touch targets</li> <li>Proper touch feedback (active states)</li> <li>Adequate spacing between interactive elements</li> </ul>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#visual-accessibility","title":"Visual Accessibility","text":"<ul> <li>High contrast ratios</li> <li>Clear visual hierarchy</li> <li>Proper focus indicators</li> <li>Readable font sizes</li> </ul>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#screen-reader-support","title":"Screen Reader Support","text":"<ul> <li>Proper ARIA labels</li> <li>Semantic HTML structure</li> <li>Clear button and link text</li> </ul>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#browser-compatibility","title":"Browser Compatibility","text":""},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#supported-features","title":"Supported Features","text":"<ul> <li>CSS Grid and Flexbox</li> <li>CSS Custom Properties</li> <li>Touch events</li> <li>Viewport units</li> <li>Modern CSS animations</li> </ul>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#fallbacks","title":"Fallbacks","text":"<ul> <li>Graceful degradation for older browsers</li> <li>Progressive enhancement approach</li> <li>Feature detection for advanced features</li> </ul>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#performance-metrics","title":"Performance Metrics","text":""},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#optimizations","title":"Optimizations","text":"<ul> <li>Reduced DOM complexity on mobile</li> <li>Optimized re-renders with React</li> <li>Efficient CSS selectors</li> <li>Minimal JavaScript overhead</li> </ul>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#loading-performance","title":"Loading Performance","text":"<ul> <li>Lazy loading of non-critical components</li> <li>Optimized bundle splitting</li> <li>Efficient API calls</li> <li>Proper caching strategies</li> </ul>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#testing-considerations","title":"Testing Considerations","text":""},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#device-testing","title":"Device Testing","text":"<ul> <li>Test on various mobile devices</li> <li>Different screen sizes and resolutions</li> <li>Various touch input methods</li> <li>Different browsers and versions</li> </ul>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#user-testing","title":"User Testing","text":"<ul> <li>Touch interaction testing</li> <li>Navigation flow validation</li> <li>Performance testing on slower devices</li> <li>Accessibility testing with screen readers</li> </ul>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#future-enhancements","title":"Future Enhancements","text":""},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#potential-improvements","title":"Potential Improvements","text":"<ul> <li>Pull-to-refresh functionality</li> <li>Infinite scroll for token lists</li> <li>Offline support with service workers</li> <li>Advanced search filters</li> <li>Customizable mobile layouts</li> </ul>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#analytics-integration","title":"Analytics Integration","text":"<ul> <li>Mobile-specific event tracking</li> <li>Performance monitoring</li> <li>User behavior analysis</li> <li>A/B testing capabilities</li> </ul>"},{"location":"_archive/TRENDING_MOBILE_OPTIMIZATIONS/#conclusion","title":"Conclusion","text":"<p>The mobile optimization of the trending page provides a comprehensive, touch-friendly experience that maintains the functionality of the desktop version while being optimized for mobile devices. The implementation follows modern mobile design patterns and ensures excellent performance across all device types.</p>"},{"location":"_archive/backend-integration/","title":"Backend Integration for App Extensions","text":"<p>This guide explains how to integrate an extension with a backend service. For Social Superhero, we reference the <code>superhero-api</code> repository.</p>"},{"location":"_archive/backend-integration/#when-to-use-a-backend","title":"When to use a backend","text":"<ul> <li>Indexing historical data and building feeds</li> <li>Search and rich queries</li> <li>WebSocket push updates</li> <li>Off-chain validation</li> </ul>"},{"location":"_archive/backend-integration/#setup-superhero-api","title":"Setup superhero-api","text":"<ul> <li>Repo: https://github.com/superhero-com/superhero-api</li> <li>Quick start (Docker): see repository README</li> <li>Configure ENV in frontend: <code>VITE_EXT_&lt;YOUR_EXT&gt;_API_URL</code></li> </ul>"},{"location":"_archive/backend-integration/#client-in-extension","title":"Client in extension","text":"<p>Create a small client under <code>src/plugins/&lt;id&gt;/client/backend.ts</code> and read the base URL from <code>VITE_EXT_&lt;ID&gt;_API_URL</code> or runtime <code>__SUPERCONFIG__</code>.</p>"},{"location":"_archive/backend-integration/#patterns","title":"Patterns","text":"<ul> <li>Pagination tokens instead of page numbers</li> <li>Idempotent POSTs, signed requests where needed</li> <li>WebSocket channels for live updates</li> </ul>"},{"location":"_archive/backend-integration/#error-handling","title":"Error handling","text":"<ul> <li>Map HTTP errors to user-friendly messages</li> <li>Retry with backoff</li> </ul>"},{"location":"_archive/build-governance-poll-extension/","title":"How to build a Superhero App Extension (Polls example)","text":"<p>This guide shows how to build a full Superhero App Extension using the Governance Polls example. You will add a feed plugin that renders polls, wire voting/revoking via Sophia contracts, add a composer attachment, integrate the Governance backend, and test locally. Follow the steps in order.</p> <p>See the Extensions overview for capabilities, loading modes, configuration and CI checks.</p>"},{"location":"_archive/build-governance-poll-extension/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node 18+, pnpm</li> <li>Funded Aeternity testnet account (for signing votes)</li> <li>Superhero dev environment and wallet</li> <li>Endpoints (confirm or adjust in runtime config):</li> <li>NODE_URL, MIDDLEWARE_URL, AE_COMPILER_URL</li> <li>GOVERNANCE_API_URL</li> </ul>"},{"location":"_archive/build-governance-poll-extension/#1-project-setup","title":"1) Project setup","text":"<ol> <li>Clone the repo and install dependencies.</li> <li>Start the dev server.</li> <li>Review runtime config (<code>public/superconfig.json</code> or <code>window.__SUPERCONFIG__</code>) and ensure Governance and MDW endpoints are set.</li> </ol>"},{"location":"_archive/build-governance-poll-extension/#2-scaffold-an-extension","title":"2) Scaffold an extension","text":"<p>Use the scaffold script to generate a minimal plugin. <pre><code>pnpm run ext:scaffold governance-polls\n</code></pre> This creates <code>src/plugins/governance-polls/index.tsx</code> and <code>src/plugins/governance-polls/ui/App.tsx</code>.</p>"},{"location":"_archive/build-governance-poll-extension/#3-add-capabilities-and-registration","title":"3) Add capabilities and registration","text":"<p>In <code>src/plugins/governance-polls/index.tsx</code>: - Set <code>capabilities: ['feed', 'composer']</code> - Register <code>attachments: () =&gt; [pollAttachmentSpec]</code> - Optionally add a route and menu for discovery</p>"},{"location":"_archive/build-governance-poll-extension/#4-implement-the-feed-plugin","title":"4) Implement the feed plugin","text":"<ul> <li>Create a <code>PollCreatedEntryData</code> type and a mapper <code>adaptPollToEntry</code>.</li> <li>Implement <code>fetchPage(page)</code> that:</li> <li>Queries open and closed polls via <code>GovernanceApi.getPollOrdering(false/true)</code></li> <li>For each poll, fetch creation time via MDW (contract create tx) and set <code>createdAt</code> on entries</li> <li>Sort entries by <code>createdAt</code> descending</li> <li>Render entries using <code>PollCreatedCard</code> and <code>FeedRenderer</code>.</li> </ul>"},{"location":"_archive/build-governance-poll-extension/#5-wire-voting-flows-sophia-contract-integration","title":"5) Wire voting flows (Sophia contract integration)","text":"<ul> <li>Use <code>useAeSdk()</code> to get <code>sdk</code> and ensure wallet is connected before voting.</li> <li>Load the poll contract with <code>GovernancePollACI.json</code> and call <code>vote(option)</code>.</li> <li>Optimistically update UI (increment selected option, update totals) and refresh from backend.</li> <li>Implement <code>revoke_vote()</code> similarly and update UI accordingly.</li> </ul>"},{"location":"_archive/build-governance-poll-extension/#6-add-composer-attachment-create-polls","title":"6) Add composer attachment (create polls)","text":"<ul> <li>Import <code>pollAttachmentSpec</code> from <code>features/social/feed-plugins/poll-attachment</code> and register via <code>attachments: () =&gt; [pollAttachmentSpec]</code>.</li> <li>This surfaces a poll creation UI in the composer toolbar; after posting, it runs its <code>onAfterPost</code> hook.</li> </ul>"},{"location":"_archive/build-governance-poll-extension/#7-local-registration-dev-only","title":"7) Local registration (dev only)","text":"<ul> <li>Temporarily import your new plugin in <code>src/plugins/local.ts</code> and add to the <code>localPlugins</code> array for local testing.</li> <li>Do not commit this if you don\u2019t want it enabled by default; guard with an env flag if needed.</li> </ul>"},{"location":"_archive/build-governance-poll-extension/#8-testing","title":"8) Testing","text":"<ul> <li>Load the app, ensure feed renders poll cards.</li> <li>Click an option to vote; confirm signing flow and UI updates.</li> <li>Revoke vote; confirm UI updates and backend reflects the change after refresh.</li> </ul>"},{"location":"_archive/build-governance-poll-extension/#9-backend-integration-notes","title":"9) Backend integration notes","text":"<ul> <li>Governance endpoints supply ordering, overviews and accept event submissions to speed up cache updates.</li> <li>You can change the base URL via runtime config. For advanced cases, add a tiny client wrapper (<code>src/plugins/governance-polls/client/backend.ts</code>).</li> <li>Consider WebSocket updates or polling intervals for faster UI convergence.</li> </ul>"},{"location":"_archive/build-governance-poll-extension/#10-troubleshooting","title":"10) Troubleshooting","text":"<ul> <li>Wallet not connected: ensure <code>useWalletConnect</code> flow and wallet pairing works</li> <li>Compiler/runtime mismatch: confirm <code>AE_COMPILER_URL</code> and SDK versions</li> <li>ACI mismatch or wrong contract address: recompile and point to correct address</li> <li>MDW differences: different deployments may expose slightly different transaction shapes; handle both <code>micro_time</code> and <code>block_time</code></li> </ul>"},{"location":"_archive/build-governance-poll-extension/#11-submission-checklist","title":"11) Submission checklist","text":"<ul> <li>Extension compiles and passes <code>pnpm run ext:check</code></li> <li>Polls render; voting flows work</li> <li>Composer poll attachment shows and works</li> </ul>"},{"location":"_archive/build-governance-poll-extension/#12-submit-your-extension-fork-pr","title":"12) Submit your extension (Fork + PR)","text":"<p>To contribute your extension to Superhero: 1. Fork the repository to your GitHub account. 2. Create a feature branch (e.g., <code>feat/polls-extension</code>). 3. Add your plugin module under <code>src/plugins/&lt;your-id&gt;/</code> and any supporting files. 4. Ensure local testing is done via <code>src/plugins/local.ts</code> (do not auto-register in production by default). 5. Run <code>pnpm run ext:check</code> and fix any validation issues. 6. Open a Pull Request from your fork/branch to this repository with a brief description and screenshots. 7. Our CI will run the extension checks; address any feedback from reviewers.</p>"},{"location":"_archive/build-nft-marketplace-extension/","title":"Tutorial: Build an NFT Marketplace App Extension","text":"<p>This guide walks you through creating a full-stack extension that adds an <code>/nft</code> route and integrates with contracts and an optional backend.</p>"},{"location":"_archive/build-nft-marketplace-extension/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node 18+, pnpm</li> <li>Funded Aeternity testnet account</li> <li>Superhero dev env running</li> <li>ENV: <code>VITE_EXT_NFT_API_URL</code> (optional)</li> </ul>"},{"location":"_archive/build-nft-marketplace-extension/#1-scaffold","title":"1) Scaffold","text":"<pre><code>pnpm run ext:scaffold nft-marketplace\n</code></pre>"},{"location":"_archive/build-nft-marketplace-extension/#2-register-route-menu","title":"2) Register route &amp; menu","text":"<p>See <code>src/plugins/nft-marketplace/index.tsx</code>.</p>"},{"location":"_archive/build-nft-marketplace-extension/#3-ui-stub","title":"3) UI stub","text":"<p>Edit <code>src/plugins/nft-marketplace/ui/MarketApp.tsx</code> to render listings.</p>"},{"location":"_archive/build-nft-marketplace-extension/#4-contracts","title":"4) Contracts","text":"<ul> <li>Write <code>contracts/Marketplace.aes</code></li> <li>Compile &amp; export ACI via a script</li> <li>Load with <code>createContractLoader(sdk)</code></li> </ul>"},{"location":"_archive/build-nft-marketplace-extension/#5-backend-integration-optional","title":"5) Backend integration (optional)","text":"<ul> <li>Add <code>client/backend.ts</code> and point to <code>VITE_EXT_NFT_API_URL</code></li> <li>Reference backend repo: https://github.com/superhero-com/superhero-api</li> </ul>"},{"location":"_archive/build-nft-marketplace-extension/#6-test-commit","title":"6) Test &amp; commit","text":"<ul> <li>Run app, navigate to <code>/nft</code></li> <li>Conventional commits after each step</li> </ul>"},{"location":"_archive/build-nft-marketplace-extension/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Compiler mismatch \u2192 update compiler URL</li> <li>Missing ACI \u2192 recompile contract</li> </ul>"},{"location":"_archive/components-tailwind-migration/","title":"Components Tailwind/Shadcn Migration Status","text":""},{"location":"_archive/components-tailwind-migration/#layout-components-migration-complete","title":"\u2705 Layout Components Migration Complete!","text":"<p>Status: All layout components have been successfully migrated to Tailwind CSS v3.4.17 (ShadCN compatible)</p> <p>Key Changes Made: - Downgraded from Tailwind CSS v4.1.12 (beta) to v3.4.17 (stable) for better ShadCN compatibility - Updated Tailwind config to use ES module syntax with proper plugin imports - Fixed PostCSS config to use CommonJS (.cjs extension) for ES module compatibility - Resolved all conflicting Tailwind class warnings - Maintained original styling using CSS variables and hybrid approach where needed - All components now build and run successfully with proper Tailwind styles loading</p>"},{"location":"_archive/components-tailwind-migration/#migration-status-legend","title":"Migration Status Legend","text":"<ul> <li>\u2705 Migrated: Component fully converted to Tailwind/Shadcn</li> <li>\ud83d\udd04 In Progress: Currently being migrated</li> <li>\u23f3 Pending: Not yet started</li> <li>\ud83d\udeab Skip: Component doesn't need migration (utilities, contexts, etc.)</li> </ul>"},{"location":"_archive/components-tailwind-migration/#components-list","title":"Components List","text":""},{"location":"_archive/components-tailwind-migration/#core-ui-components","title":"Core UI Components","text":"<ul> <li>\u2705 <code>components/ui/ae-button.tsx</code> - Custom shadcn button</li> <li>\u2705 <code>components/ui/ae-card.tsx</code> - Custom shadcn card</li> <li>\u2705 <code>components/ui/ae-dropdown-menu.tsx</code> - Custom shadcn dropdown</li> <li>\u2705 <code>components/ui/button.tsx</code> - Base shadcn button</li> <li>\u2705 <code>components/ui/card.tsx</code> - Base shadcn card</li> <li>\u2705 <code>components/ui/dropdown-menu.tsx</code> - Base shadcn dropdown</li> <li>\u2705 <code>components/ui/input.tsx</code> - Base shadcn input</li> <li>\u2705 <code>components/ui/label.tsx</code> - Base shadcn label</li> <li>\u2705 <code>components/ui/textarea.tsx</code> - Base shadcn textarea</li> <li>\u2705 <code>components/ui/select.tsx</code> - Base shadcn select</li> <li>\u2705 <code>components/ui/separator.tsx</code> - Base shadcn separator</li> <li>\u2705 <code>components/ui/avatar.tsx</code> - Base shadcn avatar</li> <li>\u2705 <code>components/ui/badge.tsx</code> - Base shadcn badge</li> </ul>"},{"location":"_archive/components-tailwind-migration/#layout-components","title":"Layout Components","text":"<ul> <li>\u2705 <code>components/layout/app-header/HeaderWalletButton.tsx</code> - Migrated to shadcn</li> <li>\u2705 <code>components/layout/app-header/WebAppHeader.tsx</code> - Migrated to Tailwind CSS</li> <li>\u2705 <code>components/layout/app-header/MobileAppHeader.tsx</code> - Migrated to Tailwind CSS</li> <li>\u2705 <code>components/layout/app-header/AppHeader.tsx</code> - Migrated to Tailwind CSS</li> <li>\u2705 <code>components/layout/app-header/MobileNavigation.tsx</code> - Migrated to Tailwind CSS</li> <li>\u2705 <code>components/layout/RightRail.tsx</code> - Migrated to Tailwind CSS</li> <li>\u2705 <code>components/layout/LeftRail.tsx</code> - Migrated to Tailwind CSS</li> <li>\u2705 <code>components/layout/FooterSection.tsx</code> - Migrated to Tailwind CSS</li> <li>\u2705 <code>components/layout/Shell.tsx</code> - Migrated to Tailwind CSS</li> </ul>"},{"location":"_archive/components-tailwind-migration/#button-components","title":"Button Components","text":"<ul> <li>\u2705 <code>components/AeButton.tsx</code> - Wrapper for backward compatibility</li> <li>\u2705 <code>components/WalletConnectBtn.tsx</code> - Uses MiniWalletInfo and ConnectWalletButton</li> <li>\u2705 <code>components/ConnectWalletButton.tsx</code> - Migrated to AeButton</li> </ul>"},{"location":"_archive/components-tailwind-migration/#form-input-components","title":"Form &amp; Input Components","text":"<ul> <li>\u2705 <code>components/SearchInput.tsx</code> - Migrated to Input component with Tailwind</li> <li>\u2705 <code>components/MobileInput.tsx</code> - Migrated to Tailwind with responsive design and mobile optimizations</li> </ul>"},{"location":"_archive/components-tailwind-migration/#card-components","title":"Card Components","text":"<ul> <li>\u2705 <code>components/SwapCard.tsx</code> - Migrated to Tailwind with modern tab interface and glassmorphism styling</li> <li>\u2705 <code>components/TransactionCard.tsx</code> - Migrated to AeCard with Badge components</li> <li>\u2705 <code>components/MobileCard.tsx</code> - Migrated to Tailwind with variant support and loading states</li> </ul>"},{"location":"_archive/components-tailwind-migration/#modal-components","title":"Modal Components","text":"<ul> <li>\u2705 <code>components/modals/UserPopup.tsx</code> - Migrated to shadcn Dialog with Avatar component and profile display</li> <li>\u2705 <code>components/modals/TransactionConfirmModal.tsx</code> - Migrated to shadcn Dialog with modern wallet confirmation UI</li> <li>\u2705 <code>components/modals/PostModal.tsx</code> - Migrated to shadcn Dialog with Input and Label components</li> <li>\u2705 <code>components/modals/TokenSelect.tsx</code> - Migrated to shadcn Dialog with token list and gradient avatars</li> <li>\u2705 <code>components/modals/FeedItemMenu.tsx</code> - Migrated to shadcn DropdownMenu with nested report dialog</li> <li>\u2705 <code>components/modals/CookiesDialog.tsx</code> - Migrated simple modal with modern styling</li> <li>\u2705 <code>components/ModalProvider.tsx</code> - Migrated with glassmorphism modal styling and backdrop blur</li> </ul>"},{"location":"_archive/components-tailwind-migration/#display-components","title":"Display Components","text":"<ul> <li>\u2705 <code>components/AddressAvatar.tsx</code> - Migrated with glassmorphism avatar styling and fallback states</li> <li>\u2705 <code>components/AddressChip.tsx</code> - Migrated to Badge with glassmorphism</li> <li>\u2705 <code>components/UserBadge.tsx</code> - Migrated to AeCard with hover popover</li> <li>\u2705 <code>components/TokenChip.tsx</code> - Migrated to Badge with loading states</li> <li>\u2705 <code>components/AeAmount.tsx</code> - Migrated to Tailwind with font-mono styling</li> <li>\u2705 <code>components/FiatValue.tsx</code> - Migrated to Tailwind with muted foreground</li> <li>\u2705 <code>components/MiniWalletInfo.tsx</code> - Migrated to Tailwind classes</li> <li>\u2705 <code>components/Spinner.tsx</code> - Migrated to Tailwind with purple accent animation</li> <li>\u2705 <code>components/CommentList.tsx</code> - Migrated with modern card layout and avatar styling</li> </ul>"},{"location":"_archive/components-tailwind-migration/#dex-components","title":"DEX Components","text":"<ul> <li>\u2705 <code>components/dex/core/SwapForm.tsx</code> - Migrated with glassmorphism card, gradient buttons, and modern styling</li> <li>\u2705 <code>components/dex/core/TokenInput.tsx</code> - Migrated with AeCard, glassmorphism, and AeButton controls</li> <li>\u2705 <code>components/dex/core/TokenSelector.tsx</code> - Migrated with modern dialog styling and glassmorphism effects</li> <li>\u2705 <code>components/dex/core/SwapConfirmation.tsx</code> - Migrated with modern dialog styling and gradient effects</li> <li>\u2705 <code>components/dex/core/SwapRouteInfo.tsx</code> - Migrated to AeCard with Badge components for route display</li> <li>\u2705 <code>components/dex/core/SwapTabSwitcher.tsx</code> - Migrated to modern tab interface with glassmorphism</li> <li>\u2705 <code>components/dex/core/LiquiditySuccessNotification.tsx</code> - Migrated with animated success states and progress indicators</li> <li>\u2705 <code>components/dex/DexSettings.tsx</code> - Migrated to clean form styling with focus states</li> <li>\u2705 <code>components/dex/widgets/NewAccountEducation.tsx</code> - Migrated with vibrant gradients and animated elements</li> <li>\u2705 <code>components/dex/supporting/RecentActivity.tsx</code> - Migrated with glassmorphism cards and removed SCSS dependency</li> </ul>"},{"location":"_archive/components-tailwind-migration/#social-components","title":"Social Components","text":"<ul> <li>\u2705 <code>features/social/components/PostContent.tsx</code> - Migrated with responsive media grids</li> <li>\u2705 <code>features/social/components/FeedItem.tsx</code> - Migrated to AeCard with glassmorphism</li> <li>\u2705 <code>features/social/components/CreatePost.tsx</code> - Migrated with glassmorphism design, responsive layout, and modern form styling</li> <li>\u2705 <code>features/social/components/SortControls.tsx</code> - Migrated to modern pill-style buttons</li> <li>\u2705 <code>features/social/components/PostCommentsList.tsx</code> - Migrated with loading/error states</li> <li>\u2705 <code>features/social/components/EmptyState.tsx</code> - Migrated to AeCard with icons</li> <li>\u2705 <code>features/social/components/CommentItem.tsx</code> - Migrated with nested reply structure</li> <li>\u2705 <code>features/social/components/CommentForm.tsx</code> - Migrated to AeCard with Textarea</li> </ul>"},{"location":"_archive/components-tailwind-migration/#trendminer-components","title":"Trendminer Components","text":"<ul> <li>\u2705 <code>components/Trendminer/TokenChat.tsx</code> - Migrated with modern chat interface and loading states</li> <li>\u2705 <code>components/Trendminer/MobileTest.tsx</code> - Migrated debug component with conditional styling</li> <li>\u2705 <code>components/Trendminer/TvCandles.tsx</code> - Migrated with Tailwind styling</li> <li>\u2705 <code>components/Trendminer/MobileTrendingTagCard.tsx</code> - Migrated with glassmorphism card styling and responsive design</li> <li>\u2705 <code>components/Trendminer/TokenMiniChart.tsx</code> - Migrated with loading state styling</li> <li>\u2705 <code>components/Trendminer/LatestTransactionsCarousel.tsx</code> - Migrated with infinite scroll animation and hover effects</li> <li>\u2705 <code>components/Trendminer/Sparkline.tsx</code> - Pure SVG component, no migration needed</li> <li>\u2705 <code>components/Trendminer/ExploreTrendsSidebar.tsx</code> - Migrated with responsive layout and modern card design</li> <li>\u2705 <code>components/Trendminer/MobileTrendingBanner.tsx</code> - Migrated with gradient backgrounds and responsive button layout</li> <li>\u2705 <code>components/Trendminer/TrendingSidebar.tsx</code> - Migrated with glassmorphism styling and gradient text effects</li> <li>\u2705 <code>components/Trendminer/MobileTrendingControls.tsx</code> - Migrated with modern form controls and filter interface</li> </ul>"},{"location":"_archive/components-tailwind-migration/#feature-components","title":"Feature Components","text":"<ul> <li>\u2705 <code>features/dex/components/AddLiquidityForm.tsx</code></li> <li>\u2705 <code>features/dex/components/RemoveLiquidityForm.tsx</code></li> <li>\u2705 <code>features/dex/components/LiquidityPreview.tsx</code></li> <li>\u2705 <code>features/dex/components/LiquidityConfirmation.tsx</code></li> <li>\u2705 <code>features/dex/components/LiquidityPositionCard.tsx</code></li> <li>\u2705 <code>features/dex/components/DexSettings.tsx</code></li> <li>\u2705 <code>features/dex/components/charts/PoolCandlestickChart.tsx</code> - Migrated to AeCard with Tailwind classes</li> <li>\u2705 <code>features/dex/components/charts/TokenPricePerformance.tsx</code> - Migrated to AeCard with proper Tailwind utilities</li> <li>\u2705 <code>features/dex/components/charts/TokenPricePerformanceExample.tsx</code> - Updated styling to use Tailwind classes</li> <li>\u2705 <code>features/bridge/components/EthBridgeWidget.tsx</code> - Migrated to AeCard with comprehensive Tailwind styling</li> </ul>"},{"location":"_archive/components-tailwind-migration/#utility-components-skip-migration","title":"Utility Components (Skip Migration)","text":"<ul> <li>\ud83d\udeab <code>components/ErrorBoundary.tsx</code> - Error boundary utility</li> <li>\ud83d\udeab <code>components/ShadcnDemo.tsx</code> - Demo component</li> <li>\ud83d\udeab <code>context/AeSdkProvider.tsx</code> - Context provider</li> <li>\ud83d\udeab <code>features/dex/context/PoolProvider.tsx</code> - Context provider</li> </ul>"},{"location":"_archive/components-tailwind-migration/#view-components-lower-priority","title":"View Components (Lower Priority)","text":"<ul> <li>\u2705 <code>views/UserProfile.tsx</code> - Migrated with glassmorphism profile card and responsive design</li> <li>\u2705 <code>views/PoolDetail.tsx</code> - Migrated with glassmorphism cards and responsive grid layouts</li> <li>\u2705 <code>views/TokenDetail.tsx</code> - Migrated with glassmorphism cards and responsive stats grid</li> <li>\u2705 <code>views/TxQueue.tsx</code> - Simple component migrated to Tailwind classes</li> <li>\u2705 <code>views/Swap.tsx</code> - Migrated with glassmorphism input cards and enhanced form styling</li> <li>\u2705 <code>views/Governance.tsx</code> - Migrated with comprehensive Tailwind styling and modern glassmorphism design</li> <li>\u2705 <code>views/ExploreRefactored.tsx</code> - Migrated with modern tab navigation and responsive layouts  </li> <li>\u2705 <code>views/Dex.tsx</code> - Migrated with gradient headers and clean spacing</li> <li>\u2705 <code>views/AddTokens.tsx</code> - Migrated with enhanced table styling and status badges</li> <li>\u2705 <code>views/Explore.tsx</code> - Migrated with modern tab navigation and table styling (duplicate of ExploreRefactored)</li> <li>\u2705 <code>views/TipDetail.tsx</code> - Migrated with modern comment system and responsive layout</li> <li>\u2705 <code>views/Landing.tsx</code> - Migrated with modern hero sections, glassmorphism cards and responsive design</li> <li>\u2705 <code>views/Trending.tsx</code> - Migrated with glassmorphism cards, modern table design and responsive layout</li> <li>\u2705 <code>views/FAQ.tsx</code> - Migrated with modern card layouts and interactive accordion</li> <li>\u2705 <code>views/Privacy.tsx</code> - Simple page migrated to Tailwind typography</li> <li>\u2705 <code>views/Tracing.tsx</code> - Debug page migrated with terminal-style code display</li> <li>\u2705 <code>views/Conference.tsx</code> - Video conference iframe migrated with enhanced styling</li> <li>\u2705 <code>views/Terms.tsx</code> - Legal page migrated to Tailwind typography</li> </ul>"},{"location":"_archive/components-tailwind-migration/#trendminer-views","title":"Trendminer Views","text":"<ul> <li>\u2705 <code>views/Trendminer/TradeCard.tsx</code> - Migrated with glassmorphism styling and modern form controls</li> <li>\u2705 <code>views/Trendminer/Invite.tsx</code> - Migrated with comprehensive Tailwind styling, glassmorphism cards and responsive design</li> <li>\u2705 <code>views/Trendminer/Daos.tsx</code> - Migrated with glassmorphism cards, responsive grid layout and modern controls</li> <li>\u2705 <code>views/Trendminer/Dao.tsx</code> - Migrated with glassmorphism styling and modern form controls</li> <li>\u2705 <code>views/Trendminer/CreateToken.tsx</code> - Migrated with modern input styling and responsive layout</li> <li>\u2705 <code>views/Trendminer/TokenDetails.tsx</code> - Migrated with comprehensive mobile-optimized layout and glassmorphism design</li> <li>\u2705 <code>views/Trendminer/Accounts.tsx</code> - Migrated with modern table styling and responsive layout</li> <li>\u2705 <code>views/Trendminer/TrendCloud.tsx</code> - Migrated with modern header controls and responsive design</li> <li>\u2705 <code>views/Trendminer/TrendCloudVisx.tsx</code> - Migrated with glassmorphism styling and modern color palette</li> <li>\u2705 <code>views/Trendminer/AccountDetails.tsx</code> - Migrated with responsive grid layout and glassmorphism cards</li> </ul>"},{"location":"_archive/components-tailwind-migration/#feature-views","title":"Feature Views","text":"<ul> <li>\u2705 <code>features/social/views/FeedList.tsx</code></li> <li>\u2705 <code>features/social/views/PostDetail.tsx</code></li> <li>\u2705 <code>features/dex/views/DexSwap.tsx</code></li> <li>\u2705 <code>features/dex/views/Pool.tsx</code></li> <li>\u2705 <code>features/dex/views/DexExploreTokens.tsx</code></li> <li>\u2705 <code>features/dex/views/DexExplorePools.tsx</code></li> <li>\u2705 <code>features/dex/views/DexExploreTransactions.tsx</code></li> <li>\u2705 <code>features/dex/views/DexWrap.tsx</code></li> <li>\u2705 <code>features/dex/views/DexBridge.tsx</code></li> <li>\u2705 <code>features/dex/layouts/DexLayout.tsx</code></li> </ul>"},{"location":"_archive/components-tailwind-migration/#root-components","title":"Root Components","text":"<ul> <li>\ud83d\udeab <code>App.tsx</code> - Root app component</li> <li>\ud83d\udeab <code>main.tsx</code> - App entry point</li> <li>\ud83d\udeab <code>routes.tsx</code> - Routing configuration</li> </ul>"},{"location":"_archive/components-tailwind-migration/#migration-priority","title":"Migration Priority","text":""},{"location":"_archive/components-tailwind-migration/#phase-1-core-components-high-priority","title":"Phase 1: Core Components (High Priority)","text":"<ol> <li>Button components (WalletConnectBtn, ConnectWalletButton)</li> <li>Input components (SearchInput)</li> <li>Display components (AddressChip, TokenChip, UserBadge)</li> <li>Card components (SwapCard, TransactionCard)</li> </ol>"},{"location":"_archive/components-tailwind-migration/#phase-2-layout-navigation","title":"Phase 2: Layout &amp; Navigation","text":"<ol> <li>Header components</li> <li>Navigation components</li> <li>Layout shells</li> </ol>"},{"location":"_archive/components-tailwind-migration/#phase-3-feature-components","title":"Phase 3: Feature Components","text":"<ol> <li>DEX components</li> <li>Social components</li> <li>Modal components</li> </ol>"},{"location":"_archive/components-tailwind-migration/#phase-4-views-pages","title":"Phase 4: Views &amp; Pages","text":"<ol> <li>Core views</li> <li>Feature views</li> <li>Trendminer views</li> </ol>"},{"location":"_archive/components-tailwind-migration/#migration-notes","title":"Migration Notes","text":"<ul> <li>Focus on components with SCSS files first</li> <li>Maintain backward compatibility during migration</li> <li>Test each component after migration</li> <li>Update imports gradually</li> <li>Remove old SCSS files after successful migration</li> </ul>"},{"location":"tutorials/hackathon/","title":"Superhero Hackathon Tutorial","text":"<p>Welcome to the Superhero hackathon! This guide helps you build a mini\u2011\u00e6pp (extension) that integrates with the Superhero app using Sophia contracts and our Plugin SDK.</p> <p>Start with the Quickstart or read the Overview.</p>"},{"location":"tutorials/hackathon/00-overview/","title":"Build Superhero Extensions with Sophia (AI\u2011assisted)","text":"<p>[!NOTE] Welcome, hackathon builders! This guide is crafted by Superhero to help you ship a mini\u2011\u00e6pp that integrates directly into the Superhero app (social + DeFi) using Sophia smart contracts and the Plugin SDK.</p> <p>This tutorial is designed for newcomers using Cursor or other AI tools to build Superhero extensions backed by their own Sophia smart contracts.</p>"},{"location":"tutorials/hackathon/00-overview/#what-youll-build","title":"What you\u2019ll build","text":"<ul> <li>A small \u00e6ternity mini\u2011\u00e6pp (extension) that integrates into superhero.com</li> <li>A TypeScript test harness that compiles, deploys, and calls your contract</li> <li>An extension that calls the contract via the JS SDK and Plugin SDK</li> </ul>"},{"location":"tutorials/hackathon/00-overview/#fast-feedback-loop","title":"Fast feedback loop","text":"<p>1) Write/refine contract with Cursor \u2192 2) Compile via <code>aesophia_http</code> \u2192 3) Test with Vitest + JS SDK \u2192 4) Integrate into a Superhero extension \u2192 5) Deploy to devnet/testnet.</p>"},{"location":"tutorials/hackathon/00-overview/#highlevel-architecture","title":"High\u2011level architecture","text":"<ul> <li>Contract (Sophia) \u2194 ACI \u2194 JS SDK (<code>@aeternity/aepp-sdk</code>) \u2194 Superhero Plugin SDK \u2194 Extension UI</li> </ul> <p>[!TIP] You can skim most language details. Focus on state + entrypoints, auth with <code>Call.caller</code>, time windows via <code>Chain</code>, and gas\u2011aware design.</p>"},{"location":"tutorials/hackathon/00-overview/#pages-in-this-tutorial","title":"Pages in this tutorial","text":"<ol> <li>Quickstart (fast track)</li> <li>Setup environment</li> <li>Superhero Wallet &amp; account</li> <li>Project scaffold</li> <li>Sophia basics for builders (10\u2011minute skim)</li> <li>Compiler and build</li> <li>Contract walkthrough: Poll (example)</li> <li>Testing with Vitest</li> <li>Deploy: devnet and testnet</li> <li>Middleware and data access</li> <li>Integrate into Superhero extension</li> <li>Plugin SDK deep dive</li> <li>AI workflows in Cursor</li> <li>Troubleshooting &amp; FAQ</li> <li>Security checklist</li> <li>Reference links &amp; glossary</li> <li>Checklist &amp; deploy extension</li> </ol>"},{"location":"tutorials/hackathon/00-overview/#official-references","title":"Official references","text":"<ul> <li>Docs hub: https://docs.aeternity.com</li> <li>Syntax: https://github.com/aeternity/aesophia/blob/master/docs/sophia_syntax.md</li> <li>Features: https://github.com/aeternity/aesophia/blob/master/docs/sophia_features.md</li> <li>Stdlib: https://github.com/aeternity/aesophia/blob/master/docs/sophia_stdlib.md</li> <li>Compiler HTTP: https://github.com/aeternity/aesophia_http</li> <li>JS SDK: https://github.com/aeternity/aepp-sdk-js</li> <li>Community Q&amp;A: https://forum.aeternity.com/c/sophia-smart-contracts/38</li> </ul>"},{"location":"tutorials/hackathon/00a-quickstart/","title":"00a \u2014 Quickstart (fast track)","text":"<p>[!IMPORTANT] Short on time? Follow this 10\u201315 minute path to get an extension running end\u2011to\u2011end.</p>"},{"location":"tutorials/hackathon/00a-quickstart/#1-install-superhero-wallet","title":"1) Install Superhero Wallet","text":"<ul> <li>Add the Chrome extension and create/import an \u00e6ternity account.</li> <li>Back up the seed phrase.</li> </ul>"},{"location":"tutorials/hackathon/00a-quickstart/#2-scaffold-project","title":"2) Scaffold project","text":"<ul> <li>Follow: 02 \u2014 Project scaffold</li> <li>Install deps, set up <code>contracts/</code>, <code>tests/</code>, <code>scripts/</code>.</li> </ul>"},{"location":"tutorials/hackathon/00a-quickstart/#3-start-the-compiler","title":"3) Start the compiler","text":"<pre><code>docker run --rm -p 3080:3080 aeternity/aesophia_http:latest\n</code></pre>"},{"location":"tutorials/hackathon/00a-quickstart/#4-write-minimal-contract","title":"4) Write minimal contract","text":"<ul> <li>Use 05 \u2014 Contract walkthrough: Poll as a template.</li> </ul>"},{"location":"tutorials/hackathon/00a-quickstart/#5-test-locally","title":"5) Test locally","text":"<ul> <li>Follow: 06 \u2014 Testing with Vitest</li> <li>Compile, deploy, and call methods in tests.</li> </ul>"},{"location":"tutorials/hackathon/00a-quickstart/#6-deploy-to-testnet","title":"6) Deploy to testnet","text":"<ul> <li>Follow: 07 \u2014 Deploy: devnet and testnet</li> </ul>"},{"location":"tutorials/hackathon/00a-quickstart/#7-integrate-into-superhero","title":"7) Integrate into Superhero","text":"<ul> <li>Follow: 08 \u2014 Integrate into Superhero extension</li> </ul> <p>[!TIP] Ready for more? Explore Plugin SDK deep dive and Middleware and data access.</p>"},{"location":"tutorials/hackathon/01-setup-environment/","title":"01 \u2014 Setup environment","text":"<p>This page gets you ready to build and test Sophia contracts and Superhero extensions with Cursor.</p>"},{"location":"tutorials/hackathon/01-setup-environment/#install-prerequisites","title":"Install prerequisites","text":"<ul> <li>Node.js LTS (e.g., 20.x)</li> <li>Git</li> <li>Docker</li> <li>Cursor (or VS Code)</li> </ul>"},{"location":"tutorials/hackathon/01-setup-environment/#create-an-ternity-account","title":"Create an \u00e6ternity account","text":"<p>You need a private key for local/devnet and a funded key for testnet.</p> <ul> <li>Generate a dev key locally for development tests.</li> <li>Obtain testnet funds for a test key via the official faucet (see docs hub for current link).</li> </ul> <p>Never commit private keys. Use <code>.env*</code> files locally only.</p>"},{"location":"tutorials/hackathon/01-setup-environment/#project-directories","title":"Project directories","text":"<p>We will use the following folders in later pages: - <code>contracts/</code> \u2014 Sophia source files (<code>.aes</code>) - <code>tests/</code> \u2014 TypeScript tests - <code>scripts/</code> \u2014 utility scripts (optional)</p>"},{"location":"tutorials/hackathon/01-setup-environment/#recommended-global-checks","title":"Recommended global checks","text":"<pre><code>node -v\nnpm -v\ndocker --version\n</code></pre> <p>If Docker is installed, you\u2019ll be able to run the Sophia HTTP compiler locally in the next steps.</p>"},{"location":"tutorials/hackathon/01-setup-environment/#whats-next","title":"What\u2019s next","text":"<ul> <li>Move to 02 \u2014 Project scaffold to initialize a workspace, add dependencies, and create <code>.env</code> profiles for devnet and testnet.</li> </ul>"},{"location":"tutorials/hackathon/01a-superhero-wallet-and-account/","title":"01a \u2014 Superhero Wallet &amp; account","text":"<p>[!NOTE] You\u2019ll use Superhero Wallet to hold your \u00e6ternity account, sign transactions, and connect your mini\u2011\u00e6pp to the Superhero app.</p>"},{"location":"tutorials/hackathon/01a-superhero-wallet-and-account/#install-the-wallet","title":"Install the wallet","text":"<ul> <li>Chrome: Superhero Wallet extension \u2014 https://chromewebstore.google.com/detail/superhero-wallet/mnhmmkepfddpifjkamaligfeemcbhdne</li> </ul> <p>[!TIP] After installing, pin the extension for quick access.</p>"},{"location":"tutorials/hackathon/01a-superhero-wallet-and-account/#create-or-import-an-account","title":"Create or import an account","text":"<ul> <li>Choose \u201cCreate\u201d to generate a new seed phrase, or \u201cImport\u201d to restore an existing one</li> <li>Write down the seed phrase offline; never share it</li> </ul> <p>[!IMPORTANT] Back up your seed phrase. Anyone with your seed can control your account.</p>"},{"location":"tutorials/hackathon/01a-superhero-wallet-and-account/#switch-to-testnet-and-fund","title":"Switch to testnet and fund","text":"<ul> <li>In settings, select \u00e6ternity testnet</li> <li>Use the testnet faucet to fund your account with AE for testing (see Reference page)</li> </ul>"},{"location":"tutorials/hackathon/01a-superhero-wallet-and-account/#connect-to-your-extension","title":"Connect to your extension","text":"<ul> <li>Your extension will interact with the wallet via the JS SDK and/or Wallet Connect flows where applicable</li> </ul>"},{"location":"tutorials/hackathon/01a-superhero-wallet-and-account/#next","title":"Next","text":"<ul> <li>Continue with 02 \u2014 Project scaffold</li> <li>Or jump to 00a \u2014 Quickstart</li> </ul>"},{"location":"tutorials/hackathon/02-project-scaffold/","title":"02 \u2014 Project scaffold","text":"<p>Initialize a minimal workspace that works well with Cursor and supports compiling, deploying, and testing Sophia contracts.</p>"},{"location":"tutorials/hackathon/02-project-scaffold/#create-folders","title":"Create folders","text":"<pre><code>mkdir -p contracts tests scripts\n</code></pre>"},{"location":"tutorials/hackathon/02-project-scaffold/#initialize-packagejson-and-install-deps","title":"Initialize package.json and install deps","text":"<pre><code>npm init -y\nnpm i @aeternity/aepp-sdk dotenv\nnpm i -D vitest ts-node typescript @types/node\nnpx tsc --init\n</code></pre> <p>Add scripts to <code>package.json</code>: <pre><code>{\n  \"scripts\": {\n    \"test\": \"vitest run\",\n    \"test:watch\": \"vitest\"\n  }\n}\n</code></pre></p>"},{"location":"tutorials/hackathon/02-project-scaffold/#environment-profiles","title":"Environment profiles","text":"<p>Create two files in the project root (do not commit real keys):</p> <p><code>.env.local</code> (devnet/local) <pre><code>NODE_URL=http://localhost:3013\nCOMPILER_URL=http://localhost:3080\nSECRET_KEY=your_local_dev_private_key_hex\n</code></pre></p> <p><code>.env.testnet</code> <pre><code>NODE_URL=https://testnet.aeternity.io\nCOMPILER_URL=http://localhost:3080\nSECRET_KEY=your_funded_testnet_private_key_hex\n</code></pre></p> <p>Switch by exporting variables, or use a small helper script to load one profile before running tests.</p>"},{"location":"tutorials/hackathon/02-project-scaffold/#next-steps","title":"Next steps","text":"<ul> <li>03 \u2014 Sophia basics for builders (skim)</li> <li>04 \u2014 Compiler and build</li> </ul>"},{"location":"tutorials/hackathon/03-sophia-basics-for-builders/","title":"03 \u2014 Sophia basics for builders (10\u2011minute skim)","text":"<p>You can rely on Cursor to scaffold most code, but read this once to avoid pitfalls.</p>"},{"location":"tutorials/hackathon/03-sophia-basics-for-builders/#core-concepts","title":"Core concepts","text":"<ul> <li>Contract structure: <code>contract</code>, <code>record state</code>, <code>init</code>, <code>entrypoint</code>, <code>stateful entrypoint</code></li> <li>Auth: <code>Call.caller</code> for owner/role checks; enforce one\u2011vote\u2011per\u2011address</li> <li>Time: choose <code>Chain.height</code> or timestamp; enforce open/close windows consistently</li> <li>Data structures: prefer <code>Map</code> for lookups; avoid unbounded loops over growing lists</li> <li>Errors: <code>require</code>/<code>abort</code> with clear messages; fail early</li> <li>Events: emit small events for create/vote/close; useful for off\u2011chain indexing</li> </ul>"},{"location":"tutorials/hackathon/03-sophia-basics-for-builders/#minimal-code-patterns","title":"Minimal code patterns","text":"<ul> <li>Guard first, then mutate state</li> <li>Validate indices (option bounds)</li> <li>Keep return types simple for SDK decoding</li> </ul>"},{"location":"tutorials/hackathon/03-sophia-basics-for-builders/#where-to-skim-in-the-docs","title":"Where to skim in the docs","text":"<ul> <li>Syntax: https://github.com/aeternity/aesophia/blob/master/docs/sophia_syntax.md</li> <li>Features (state, entrypoints, exceptions, events): https://github.com/aeternity/aesophia/blob/master/docs/sophia_features.md</li> <li>Stdlib (Map, List, Option, Chain, Call): https://github.com/aeternity/aesophia/blob/master/docs/sophia_stdlib.md</li> </ul>"},{"location":"tutorials/hackathon/03-sophia-basics-for-builders/#next","title":"Next","text":"<ul> <li>04 \u2014 Compiler and build</li> <li>05 \u2014 Contract walkthrough: Poll</li> </ul>"},{"location":"tutorials/hackathon/04-compiler-and-build/","title":"04 \u2014 Compiler and build","text":"<p>Set up the Sophia HTTP compiler and connect your tests to it.</p>"},{"location":"tutorials/hackathon/04-compiler-and-build/#local-compiler-recommended-in-hackathons","title":"Local compiler (recommended in hackathons)","text":"<p>Run the compiler in Docker: <pre><code>docker run --rm -p 3080:3080 aeternity/aesophia_http:latest\n</code></pre> This exposes the compiler at <code>http://localhost:3080</code>.</p>"},{"location":"tutorials/hackathon/04-compiler-and-build/#remote-compiler-optional","title":"Remote compiler (optional)","text":"<p>If a public compiler is provided in official docs, set <code>COMPILER_URL</code> to that. Otherwise use the local Docker compiler above for reliable results.</p>"},{"location":"tutorials/hackathon/04-compiler-and-build/#pinning-versions","title":"Pinning versions","text":"<p>In your Sophia sources, use the compiler pragma (example): <pre><code>pragma solidity 6.5.0\n</code></pre> Adjust to a version supported by your <code>aesophia_http</code> image. Check the <code>aesophia</code> release notes if compilation fails.</p>"},{"location":"tutorials/hackathon/04-compiler-and-build/#next","title":"Next","text":"<ul> <li>05 \u2014 Contract walkthrough: Poll</li> <li>06 \u2014 Testing with Vitest</li> </ul>"},{"location":"tutorials/hackathon/05-contract-poll-walkthrough/","title":"05 \u2014 Contract walkthrough: Poll","text":"<p>Design a simple, gas\u2011aware poll contract newcomers can extend.</p>"},{"location":"tutorials/hackathon/05-contract-poll-walkthrough/#data-model","title":"Data model","text":"<ul> <li><code>Poll</code>: id, question, options, open/close heights, owner, isClosed</li> <li><code>votesByAddress</code>: Address \u2192 optionIdx (one vote per address)</li> <li><code>tally</code>: optionIdx \u2192 count (avoid iterating all voters)</li> </ul>"},{"location":"tutorials/hackathon/05-contract-poll-walkthrough/#entrypoints-suggested","title":"Entrypoints (suggested)","text":"<ul> <li><code>create_poll(question: string, options: list(string), open_h: int, close_h: int)</code></li> <li><code>vote(poll_id: int, option_idx: int)</code></li> <li><code>close(poll_id: int)</code></li> <li><code>get_results(poll_id: int) : list(int)</code> (or a record)</li> </ul>"},{"location":"tutorials/hackathon/05-contract-poll-walkthrough/#invariants-guards","title":"Invariants &amp; guards","text":"<ul> <li>Creation: <code>options</code> length \u2265 2; unique options; <code>open_h &lt; close_h</code></li> <li>Voting: now in [open_h, close_h); one vote per address; index bounds</li> <li>Closing: only owner or after <code>close_h</code>; id must exist; idempotent</li> </ul>"},{"location":"tutorials/hackathon/05-contract-poll-walkthrough/#events","title":"Events","text":"<ul> <li><code>PollCreated(poll_id, owner)</code></li> <li><code>Voted(poll_id, voter, option_idx)</code></li> <li><code>Closed(poll_id)</code></li> </ul> <p>Keep events small. Index off\u2011chain when needed.</p>"},{"location":"tutorials/hackathon/05-contract-poll-walkthrough/#gas-considerations","title":"Gas considerations","text":"<ul> <li>Use <code>Map</code> for <code>tally</code> and <code>votesByAddress</code></li> <li>Do not loop over all voters on\u2011chain to compute results</li> <li>Keep strings reasonably short</li> </ul>"},{"location":"tutorials/hackathon/05-contract-poll-walkthrough/#next","title":"Next","text":"<ul> <li>06 \u2014 Testing with Vitest</li> </ul>"},{"location":"tutorials/hackathon/06-testing-with-vitest/","title":"06 \u2014 Testing with Vitest","text":"<p>Compile, deploy, and call your Sophia contract using the JS SDK in Vitest.</p>"},{"location":"tutorials/hackathon/06-testing-with-vitest/#setup","title":"Setup","text":"<p>Ensure you have <code>.env.local</code> or <code>.env.testnet</code> prepared.</p>"},{"location":"tutorials/hackathon/06-testing-with-vitest/#example-test","title":"Example test","text":"<pre><code>// tests/poll.test.ts\nimport { describe, it, expect } from 'vitest'\nimport { readFileSync } from 'fs'\nimport 'dotenv/config'\nimport { AeSdk, Node, MemoryAccount } from '@aeternity/aepp-sdk'\n\nconst NODE_URL = process.env.NODE_URL!\nconst COMPILER_URL = process.env.COMPILER_URL!\nconst SECRET_KEY = process.env.SECRET_KEY!\n\ndescribe('Poll contract', () =&gt; {\n  it('compiles, deploys, and allows a vote', async () =&gt; {\n    const node = new Node(NODE_URL)\n    const aeSdk = new AeSdk({\n      nodes: [{ name: 'net', instance: node }],\n      compilerUrl: COMPILER_URL,\n      accounts: [new MemoryAccount(SECRET_KEY)],\n    })\n\n    const source = readFileSync('contracts/Poll.aes', 'utf8')\n\n    const contract = await aeSdk.getContractInstance({ source })\n    await contract.deploy(['My poll?', ['Yes', 'No'], 100000])\n\n    const voteTx = await contract.methods.vote(0, 0)\n    expect(voteTx.hash).toBeDefined()\n\n    const res = await contract.methods.get_results(0)\n    expect(res.decodedResult).toBeDefined()\n  })\n})\n</code></pre>"},{"location":"tutorials/hackathon/06-testing-with-vitest/#negative-tests-to-add","title":"Negative tests to add","text":"<ul> <li>Duplicate vote should fail</li> <li>Voting outside open/close window should fail</li> <li>Invalid option index should fail</li> </ul>"},{"location":"tutorials/hackathon/06-testing-with-vitest/#tips","title":"Tips","text":"<ul> <li>Use small strings for options and questions</li> <li>Prefer height windows for deterministic tests</li> </ul>"},{"location":"tutorials/hackathon/06-testing-with-vitest/#next","title":"Next","text":"<ul> <li>07 \u2014 Deploy: devnet and testnet</li> </ul>"},{"location":"tutorials/hackathon/07-deploy-devnet-and-testnet/","title":"07 \u2014 Deploy: devnet and testnet","text":"<p>Run your tests and deployments against a local devnet or the public testnet.</p>"},{"location":"tutorials/hackathon/07-deploy-devnet-and-testnet/#devnet-local","title":"Devnet (local)","text":"<ul> <li>Start a local node (see official docs) and point <code>NODE_URL</code> to it</li> <li>Use the local Sophia HTTP compiler at <code>http://localhost:3080</code></li> <li>Fund your dev key in the local node if needed (or use pre-funded accounts)</li> </ul>"},{"location":"tutorials/hackathon/07-deploy-devnet-and-testnet/#testnet-public","title":"Testnet (public)","text":"<ul> <li>Set <code>.env.testnet</code> with: <pre><code>NODE_URL=https://testnet.aeternity.io\nCOMPILER_URL=http://localhost:3080\nSECRET_KEY=your_funded_testnet_private_key_hex\n</code></pre></li> <li>Fund your test key using the official faucet (see docs hub for current link)</li> </ul>"},{"location":"tutorials/hackathon/07-deploy-devnet-and-testnet/#deploy-once-reuse-address","title":"Deploy once, reuse address","text":"<p>In longer tests, deploy once and reuse the contract address to reduce cost/time. Persist addresses per network (e.g., <code>.contracts.testnet.json</code>).</p>"},{"location":"tutorials/hackathon/07-deploy-devnet-and-testnet/#sanity-checks-before-testnet-deploy","title":"Sanity checks before testnet deploy","text":"<ul> <li>All negative tests pass locally</li> <li>Compiler version pinned and consistent</li> <li>Events are emitted where needed for indexing</li> </ul>"},{"location":"tutorials/hackathon/07-deploy-devnet-and-testnet/#next","title":"Next","text":"<ul> <li>08 \u2014 Integrate into Superhero extension</li> </ul>"},{"location":"tutorials/hackathon/07a-middleware-and-data-access/","title":"07a \u2014 Middleware and data access","text":"<p>[!NOTE] Your extension will often need to read blockchain data (txs, contracts, events). The \u00e6ternity middleware provides indexed APIs so you don\u2019t have to parse blocks manually.</p>"},{"location":"tutorials/hackathon/07a-middleware-and-data-access/#what-is-the-middleware","title":"What is the middleware?","text":"<p>A service indexing on\u2011chain data (transactions, contracts, names, etc.) and exposing REST/GraphQL endpoints for query and filtering.</p>"},{"location":"tutorials/hackathon/07a-middleware-and-data-access/#typical-queries","title":"Typical queries","text":"<ul> <li>Fetch account transactions</li> <li>Lookup contract calls/events by contract address</li> <li>Paginate and filter by time or height</li> </ul> <p>[!TIP] Keep responses small: request only the fields you need and paginate.</p>"},{"location":"tutorials/hackathon/07a-middleware-and-data-access/#usage-patterns","title":"Usage patterns","text":"<ul> <li>Server\u2011side: call the middleware from your extension\u2019s backend</li> <li>Client\u2011side: call from the extension UI (consider CORS and rate limits)</li> </ul>"},{"location":"tutorials/hackathon/07a-middleware-and-data-access/#superhero-api-optional-upcoming","title":"Superhero API (optional, upcoming)","text":"<p>We\u2019re adding an option to build Superhero API extensions that tailor data (transactions and contract interactions) for your use case. This can simplify complex queries you\u2019d otherwise perform directly against middleware.</p> <p>[!WARNING] Until the Superhero API extension path is available, plan to fetch directly from middleware.</p>"},{"location":"tutorials/hackathon/07a-middleware-and-data-access/#next","title":"Next","text":"<ul> <li>Back to Deploy: devnet and testnet</li> <li>Continue to Integrate into Superhero extension</li> </ul>"},{"location":"tutorials/hackathon/08-integrate-into-superhero-extension/","title":"08 \u2014 Integrate into Superhero extension","text":"<p>Call your contract from a Superhero extension using the JS SDK and Plugin SDK.</p> <p>[!NOTE] New to the Plugin SDK? Read the Plugin SDK deep dive for capabilities and examples.</p>"},{"location":"tutorials/hackathon/08-integrate-into-superhero-extension/#expose-contract-address","title":"Expose contract address","text":"<p>Provide a network\u2011specific address via env, e.g. <code>VITE_POLL_CONTRACT</code>.</p>"},{"location":"tutorials/hackathon/08-integrate-into-superhero-extension/#obtain-aci","title":"Obtain ACI","text":"<p>Load from source in tests, or keep a built ACI JSON alongside your extension.</p>"},{"location":"tutorials/hackathon/08-integrate-into-superhero-extension/#wallet-connect","title":"Wallet connect","text":"<p>Use <code>ensureWallet()</code> in attachments (or initialize via your app shell) to obtain a connected SDK before sending transactions.</p>"},{"location":"tutorials/hackathon/08-integrate-into-superhero-extension/#call-from-the-extension","title":"Call from the extension","text":"<ul> <li>Initialize an <code>AeSdk</code> instance at app start or via <code>ensureWallet</code></li> <li>Load the contract by address and ACI</li> <li>Call view/stateful methods accordingly</li> </ul> <p>Sketch: <pre><code>import { AeSdk, Node } from '@aeternity/aepp-sdk'\n\nconst aeSdk = new AeSdk({\n  nodes: [{ name: 'net', instance: new Node(import.meta.env.VITE_NODE_URL) }],\n  compilerUrl: import.meta.env.VITE_COMPILER_URL,\n})\n\n// later\nconst contract = await aeSdk.getContractInstance({\n  aci: pollAciJson,\n  address: import.meta.env.VITE_POLL_CONTRACT,\n})\n\nconst results = await contract.methods.get_results(0)\n</code></pre></p> <p>[!TIP] Consider emitting small on\u2011chain events and handling heavy processing off\u2011chain, then pushing entries into the feed via <code>pushFeedEntry</code>.</p>"},{"location":"tutorials/hackathon/08-integrate-into-superhero-extension/#uiux-tips","title":"UI/UX tips","text":"<ul> <li>Disable action buttons if not in open window or while pending</li> <li>Reflect on\u2011chain errors with friendly messages</li> <li>Show tallies and event\u2011driven updates</li> </ul>"},{"location":"tutorials/hackathon/08-integrate-into-superhero-extension/#next","title":"Next","text":"<ul> <li>Continue to Plugin SDK deep dive or</li> <li>Jump to AI workflows in Cursor</li> </ul>"},{"location":"tutorials/hackathon/08a-plugin-sdk-deep-dive/","title":"08a \u2014 Plugin SDK deep dive","text":"<p>[!NOTE] The Plugin SDK lets your mini\u2011\u00e6pp integrate into Superhero: add composer attachments, feed entries, item actions, custom routes/modals, and menu entries.</p>"},{"location":"tutorials/hackathon/08a-plugin-sdk-deep-dive/#capabilities-v1x","title":"Capabilities (v1.x)","text":"<ul> <li><code>feed</code>: add new item kinds to the unified feed</li> <li><code>composer</code>: add actions and attachments (interactive panels)</li> <li><code>item-actions</code>: add contextual actions to feed items</li> <li><code>routes</code>: add pages to the app router</li> <li><code>modals</code>: register reusable modals</li> <li><code>menu</code>: contribute navigation items</li> </ul>"},{"location":"tutorials/hackathon/08a-plugin-sdk-deep-dive/#core-types-simplified","title":"Core types (simplified)","text":"<pre><code>// See src/plugin-sdk/index.ts\nexport type PluginMeta = {\n  id: string; name: string; version: string; apiVersion: '1.x';\n  capabilities: Array&lt;'feed' | 'composer' | 'item-actions' | 'routes' | 'modals'&gt;;\n};\n\nexport type ComposerActionCtx = {\n  insertText(text: string): void;\n  navigate(to: string): void;\n  storage: { get(k: string): any; set(k: string, v: any): void };\n  theme: { colorScheme: 'light' | 'dark' };\n  events: { emit(e: string, p?: any): void; on(e: string, h: (p: any)=&gt;void): () =&gt; void };\n  cacheLink?: (postId: string, kind: string, payload: any) =&gt; void;\n  pushFeedEntry?: (kind: string, entry: any) =&gt; void;\n};\n\nexport type ComposerAttachmentCtx = ComposerActionCtx &amp; {\n  getValue&lt;T=any&gt;(ns: string): T | undefined;\n  setValue&lt;T=any&gt;(ns: string, value: T): void;\n  ensureWallet(): Promise&lt;{ sdk: any; currentBlockHeight?: number }&gt;\n};\n</code></pre>"},{"location":"tutorials/hackathon/08a-plugin-sdk-deep-dive/#attachments-recommended-surface","title":"Attachments (recommended surface)","text":"<pre><code>import { definePlugin, type ComposerAttachmentSpec } from '@superhero/plugin-sdk';\n\nexport default definePlugin({\n  meta: { id: 'org.example', name: 'Example', version: '1.0.0', apiVersion: '1.x', capabilities: ['composer'] },\n  setup({ register }) {\n    const spec: ComposerAttachmentSpec = {\n      id: 'example-attachment',\n      label: 'Example',\n      Panel: ({ ctx, onRemove }) =&gt; null, // render your UI\n      validate: (ctx) =&gt; [],\n      onAfterPost: async (ctx, post) =&gt; {\n        const { sdk } = await ctx.ensureWallet();\n        // interact with chain, then push feed entry if needed\n        ctx.pushFeedEntry?.('example', { id: post.id, createdAt: new Date().toISOString(), kind: 'example', data: {} });\n      },\n    };\n    register({ attachments: () =&gt; [spec] });\n  }\n});\n</code></pre> <p>[!TIP] Use <code>ensureWallet()</code> inside attachments to request a connected wallet SDK and optional chain context (e.g., current height).</p>"},{"location":"tutorials/hackathon/08a-plugin-sdk-deep-dive/#feed-plugins","title":"Feed plugins","text":"<ul> <li>Implement <code>fetchPage(page)</code> and <code>Render({ entry })</code></li> <li>Use <code>Skeleton</code> for loading placeholders</li> </ul>"},{"location":"tutorials/hackathon/08a-plugin-sdk-deep-dive/#item-actions","title":"Item actions","text":"<ul> <li>Gate actions with <code>when(entry)</code> and call chain or UI APIs inside <code>onClick</code></li> </ul>"},{"location":"tutorials/hackathon/08a-plugin-sdk-deep-dive/#routes-and-modals","title":"Routes and modals","text":"<ul> <li>Contribute routes (<code>{ path, element }</code>) and <code>modals</code> as a <code>Record&lt;string, React.FC&gt;</code></li> <li>Add <code>menu</code> entries to surface your feature in app navigation</li> </ul>"},{"location":"tutorials/hackathon/08a-plugin-sdk-deep-dive/#events-storage-theme","title":"Events, storage, theme","text":"<ul> <li><code>events.emit/on</code> to integrate with host events</li> <li><code>storage.get/set</code> for lightweight persistence</li> <li><code>theme.colorScheme</code> to adapt visuals</li> </ul> <p>[!WARNING] Keep attachments lean: validate inputs, avoid heavy on-chain loops, and prefer emitting small events or pushing feed entries for off\u2011chain processing.</p>"},{"location":"tutorials/hackathon/08a-plugin-sdk-deep-dive/#next","title":"Next","text":"<ul> <li>Back to Integrate into Superhero extension</li> <li>Or continue to AI workflows in Cursor</li> </ul>"},{"location":"tutorials/hackathon/09-ai-workflows-in-cursor/","title":"09 \u2014 AI workflows in Cursor","text":"<p>Use AI effectively while keeping control of correctness and gas.</p>"},{"location":"tutorials/hackathon/09-ai-workflows-in-cursor/#prompt-recipes","title":"Prompt recipes","text":"<ul> <li>Scaffold contract</li> <li>\u201cCreate a Sophia Poll contract with state: question, options, open/close heights, one vote per address. Add events and guards.\u201d</li> <li>Tighten invariants</li> <li>\u201cAdd <code>require</code> checks for time window and unique voting; validate option index; return clear errors.\u201d</li> <li>Extend tests</li> <li>\u201cAdd Vitest cases for duplicate vote, before open, after close, and invalid index.\u201d</li> <li>Gas review</li> <li>\u201cReplace list scans with <code>Map</code> lookups; avoid unbounded loops; keep events minimal.\u201d</li> </ul>"},{"location":"tutorials/hackathon/09-ai-workflows-in-cursor/#verification-loop","title":"Verification loop","text":"<p>1) Run tests 2) If failing, ask AI to propose minimal edits 3) Re-run tests and inspect diffs</p>"},{"location":"tutorials/hackathon/09-ai-workflows-in-cursor/#pitfalls","title":"Pitfalls","text":"<ul> <li>Hallucinated SDK APIs \u2192 check <code>@aeternity/aepp-sdk</code> docs</li> <li>Version mismatches \u2192 pin compiler and SDK; verify with a small compile test</li> <li>Large loops or strings \u2192 watch gas usage</li> </ul>"},{"location":"tutorials/hackathon/09-ai-workflows-in-cursor/#next","title":"Next","text":"<ul> <li>10 \u2014 Troubleshooting &amp; FAQ</li> </ul>"},{"location":"tutorials/hackathon/10-troubleshooting-and-faq/","title":"10 \u2014 Troubleshooting &amp; FAQ","text":""},{"location":"tutorials/hackathon/10-troubleshooting-and-faq/#compiler-fails-with-version-error","title":"Compiler fails with version error","text":"<ul> <li>Adjust the pragma to a version supported by your <code>aesophia_http</code> image</li> <li>Pull latest image or pin a matching version</li> </ul>"},{"location":"tutorials/hackathon/10-troubleshooting-and-faq/#cannot-reach-compiler-at-httplocalhost3080","title":"Cannot reach compiler at http://localhost:3080","text":"<ul> <li>Ensure Docker container is running</li> <li>Check port 3080 is free</li> <li>Verify <code>COMPILER_URL</code> env variable is set in tests/app</li> </ul>"},{"location":"tutorials/hackathon/10-troubleshooting-and-faq/#sdk-call-throws-decoding-error","title":"SDK call throws decoding error","text":"<ul> <li>Simplify return types; prefer lists/records with primitive fields</li> <li>Ensure ACI matches deployed bytecode</li> </ul>"},{"location":"tutorials/hackathon/10-troubleshooting-and-faq/#transactions-are-failing-on-testnet","title":"Transactions are failing on testnet","text":"<ul> <li>Verify your test key is funded</li> <li>Check gas/fee parameters and network URL</li> </ul>"},{"location":"tutorials/hackathon/10-troubleshooting-and-faq/#duplicate-vote-not-rejected","title":"Duplicate vote not rejected","text":"<ul> <li>Add <code>require(votesByAddress[caller] == None, \"Already voted\")</code> logic</li> </ul>"},{"location":"tutorials/hackathon/10-troubleshooting-and-faq/#results-computation-times-out","title":"Results computation times out","text":"<ul> <li>Avoid iterating over all voters; maintain a <code>tally</code> map updated per vote</li> </ul>"},{"location":"tutorials/hackathon/10-troubleshooting-and-faq/#how-do-i-debug-quickly","title":"How do I debug quickly?","text":"<ul> <li>Use the SDK dry\u2011run to simulate calls</li> <li>Add temporary view entrypoints that expose internal state (remove before deploy)</li> </ul>"},{"location":"tutorials/hackathon/10-troubleshooting-and-faq/#where-to-ask-for-help","title":"Where to ask for help?","text":"<ul> <li>Community Q&amp;A: https://forum.aeternity.com/c/sophia-smart-contracts/38</li> </ul>"},{"location":"tutorials/hackathon/11-security-checklist/","title":"11 \u2014 Security checklist (Poll contracts)","text":"<p>Use this before deploying to testnet/mainnet.</p> <ul> <li>Auth</li> <li>Use <code>Call.caller</code> and check owner/admin where required</li> <li>Reject unauthorized state changes early</li> <li>Time windows</li> <li>Enforce open/close windows consistently (height or timestamp)</li> <li>Prevent voting after close; prevent closing before close unless owner</li> <li>Input validation</li> <li>Non\u2011empty question; \u2265 2 options; option indices in range; unique options</li> <li>One vote per address</li> <li>Track in <code>votesByAddress</code>; guard with <code>require</code></li> <li>Gas &amp; storage</li> <li>Use <code>Map</code> for tallies; avoid unbounded loops; keep strings small</li> <li>Events</li> <li>Emit <code>PollCreated</code>, <code>Voted</code>, <code>Closed</code>; keep payloads minimal</li> <li>ACI &amp; interface</li> <li>Keep return types simple; maintain stable entrypoint names</li> <li>Testing</li> <li>Negative tests for all guards; dry\u2011run for heavy paths</li> <li>Versioning</li> <li>Pin compiler version; document init args; plan for migration</li> </ul>"},{"location":"tutorials/hackathon/12-reference-links-and-glossary/","title":"12 \u2014 Reference links &amp; glossary","text":""},{"location":"tutorials/hackathon/12-reference-links-and-glossary/#official-links","title":"Official links","text":"<ul> <li>Docs hub: https://docs.aeternity.com</li> <li>Sophia syntax: https://github.com/aeternity/aesophia/blob/master/docs/sophia_syntax.md</li> <li>Sophia features: https://github.com/aeternity/aesophia/blob/master/docs/sophia_features.md</li> <li>Sophia stdlib: https://github.com/aeternity/aesophia/blob/master/docs/sophia_stdlib.md</li> <li>Sophia compiler (HTTP): https://github.com/aeternity/aesophia_http</li> <li>JS SDK: https://github.com/aeternity/aepp-sdk-js</li> <li>Community forum: https://forum.aeternity.com/c/sophia-smart-contracts/38</li> </ul>"},{"location":"tutorials/hackathon/12-reference-links-and-glossary/#network","title":"Network","text":"<ul> <li>Testnet RPC: https://testnet.aeternity.io</li> <li>Faucet: see docs hub for the current faucet link</li> </ul>"},{"location":"tutorials/hackathon/12-reference-links-and-glossary/#glossary","title":"Glossary","text":"<ul> <li>ACI: Interface describing contract entrypoints and types</li> <li>FATE: \u00e6ternity\u2019s virtual machine that executes compiled contracts</li> <li>Entrypoint: Public function callable from transactions</li> <li>Stateful: Entrypoint that mutates contract <code>state</code></li> <li>Dry\u2011run: Simulate execution without broadcasting a transaction</li> </ul>"},{"location":"tutorials/hackathon/13-checklist-and-deploy-extension/","title":"13 \u2014 Checklist &amp; deploy extension","text":"<p>Use this checklist before you submit or deploy your hackathon project.</p>"},{"location":"tutorials/hackathon/13-checklist-and-deploy-extension/#technical","title":"Technical","text":"<ul> <li>Env: <code>VITE_*</code> variables set for node/compiler/contract addresses</li> <li>Contract: compiler version pinned; events emitted where needed</li> <li>Tests: happy/negative paths; no flaky height assumptions</li> <li>Integration: wallet connect flow; ACI loaded; error handling in UI</li> <li>Data: middleware queries scoped/paginated; plan for rate limits</li> </ul>"},{"location":"tutorials/hackathon/13-checklist-and-deploy-extension/#ux","title":"UX","text":"<ul> <li>Clear affordances; disabled states while pending</li> <li>Friendly error messages; confirmations</li> <li>Dark/light theme compatible (use <code>theme.colorScheme</code>)</li> </ul>"},{"location":"tutorials/hackathon/13-checklist-and-deploy-extension/#security","title":"Security","text":"<ul> <li>One\u2011vote\u2011per\u2011address (if voting); input validation</li> <li>Avoid unbounded loops and large payloads</li> <li>Never expose private keys; use Wallet for signing</li> </ul> <p>[!IMPORTANT] Review the Security checklist before deploying.</p>"},{"location":"tutorials/hackathon/13-checklist-and-deploy-extension/#submission-deploy","title":"Submission &amp; deploy","text":"<ul> <li>Include README with setup and env docs</li> <li>Provide testnet contract addresses and sample accounts</li> <li>Optional: link to a short demo video</li> </ul>"},{"location":"tutorials/hackathon/13-checklist-and-deploy-extension/#next","title":"Next","text":"<ul> <li>Back to Overview or Quickstart</li> </ul>"},{"location":"tutorials/hackathon/SUMMARY/","title":"Summary","text":"<ul> <li>Overview</li> <li>Quickstart</li> <li>Setup environment</li> <li>Superhero Wallet &amp; account</li> <li>Project scaffold</li> <li>Sophia basics</li> <li>Compiler and build</li> <li>Contract walkthrough: Poll</li> <li>Testing with Vitest</li> <li>Deploy: devnet and testnet</li> <li>Middleware and data access</li> <li>Integrate into Superhero extension</li> <li>Plugin SDK deep dive</li> <li>AI workflows in Cursor</li> <li>Troubleshooting &amp; FAQ</li> <li>Security checklist</li> <li>Reference links &amp; glossary</li> <li>Checklist &amp; deploy extension</li> </ul>"}]}